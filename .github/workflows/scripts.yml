name: Create Scripts and Package

on:
  workflow_call:
    inputs:
      frankenphp_version:
        required: true
        type: string
      php_short:
        required: true
        type: string

jobs:
  package:
    runs-on: ubuntu-latest
    steps:
      - name: Package FrankenPHP with libraries
        run: |
          # Create directories
          mkdir -p dist/lib
          mkdir -p dist/bin
          
          # Copy PHP shared library
          PHP_LIB_PATH="$(php-config --prefix)/lib/libphp.so"
          if [ -f "$PHP_LIB_PATH" ]; then
            cp "$PHP_LIB_PATH" dist/lib/
            echo "Copied libphp.so from $PHP_LIB_PATH"
          else
            echo "ERROR: Cannot find libphp.so at $PHP_LIB_PATH"
            find /usr/local -name "libphp.so"
            exit 1
          fi
          
          # Copy PHP binaries
          PHP_BIN_PATH="$(php-config --prefix)/bin"
          cp "$PHP_BIN_PATH/php" dist/bin/
          cp "$PHP_BIN_PATH/php-config" dist/bin/
          cp "$PHP_BIN_PATH/phpize" dist/bin/
          cp composer.phar dist/bin/composer
          chmod +x dist/bin/composer
          
          # Copy sqlite3, zip, unzip
          for tool in sqlite3 zip unzip; do
            if command -v $tool &> /dev/null; then
              cp $(which $tool) dist/bin/
              echo "Copied $tool"
            fi
          done
          
          # Copy git and helpers
          if command -v git &> /dev/null; then
            cp $(which git) dist/bin/
            GIT_EXEC_PATH=$(git --exec-path)
            if [ -d "$GIT_EXEC_PATH" ]; then
              mkdir -p dist/libexec/git-core
              cp -r "$GIT_EXEC_PATH"/* dist/libexec/git-core/
              mv dist/bin/git dist/bin/git.real
              cat > dist/bin/git << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export GIT_EXEC_PATH="$SCRIPT_DIR/../libexec/git-core"
          exec "$SCRIPT_DIR/git.real" "$@"
          EOF
              chmod +x dist/bin/git
            fi
          fi
          
          # Copy Node.js and npm
          if command -v node &> /dev/null; then
            cp $(which node) dist/bin/
            NPM_PREFIX=$(npm config get prefix)
            mkdir -p dist/lib/node_modules
            if [ -d "$NPM_PREFIX/lib/node_modules/npm" ]; then
              cp -r "$NPM_PREFIX/lib/node_modules/npm" dist/lib/node_modules/
            fi
            cat > dist/bin/npm << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export NODE_PATH="$SCRIPT_DIR/../lib/node_modules"
          exec "$SCRIPT_DIR/node" "$SCRIPT_DIR/../lib/node_modules/npm/bin/npm-cli.js" "$@"
          EOF
            chmod +x dist/bin/npm
            cat > dist/bin/npx << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export NODE_PATH="$SCRIPT_DIR/../lib/node_modules"
          exec "$SCRIPT_DIR/node" "$SCRIPT_DIR/../lib/node_modules/npm/bin/npx-cli.js" "$@"
          EOF
            chmod +x dist/bin/npx
          fi
          
          # Copy FrankenPHP binary
          cp frankenphp-${{ inputs.frankenphp_version }}/caddy/frankenphp/frankenphp dist/bin/frankenphp
          chmod +x dist/bin/frankenphp
          
          # Copy all required shared libraries
          echo "Copying shared library dependencies..."
          for binary in frankenphp-${{ inputs.frankenphp_version }}/caddy/frankenphp/frankenphp "$PHP_BIN_PATH/php" "$PHP_LIB_PATH"; do
            ldd "$binary" | grep "=> /" | awk '{print $3}' | grep -v "libc.so" | grep -v "ld-linux" | xargs -I '{}' cp -v '{}' dist/lib/ || true
          done
          
          # Copy additional common libraries
          for lib in libzip.so* libpng16.so* libjpeg.so* libfreetype.so* libicu*.so* libonig.so* libxml2.so* libxslt.so* libgd.so* libssl.so* libcrypto.so* libcurl.so* libmariadb.so*; do
            find /usr/lib /usr/lib64 /usr/lib/x86_64-linux-gnu /usr/local/lib -name "$lib" -exec cp -v {} dist/lib/ \; 2>/dev/null || true
          done
          
          # Create self-contained wrapper scripts
          mv dist/bin/php dist/bin/php.real
          cat > dist/bin/php << 'EOF'
          #!/bin/bash
          # Resolve symlinks to get the actual script location
          SOURCE="${BASH_SOURCE[0]}"
          while [ -h "$SOURCE" ]; do
            DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
            SOURCE="$(readlink "$SOURCE")"
            [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
          done
          SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          
          export LD_LIBRARY_PATH="$SCRIPT_DIR/../lib:$LD_LIBRARY_PATH"
          exec "$SCRIPT_DIR/php.real" "$@"
          EOF
          chmod +x dist/bin/php
          
          mv dist/bin/frankenphp dist/bin/frankenphp.real
          cat > dist/bin/frankenphp << 'EOF'
          #!/bin/bash
          # Resolve symlinks to get the actual script location
          SOURCE="${BASH_SOURCE[0]}"
          while [ -h "$SOURCE" ]; do
            DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
            SOURCE="$(readlink "$SOURCE")"
            [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
          done
          SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          
          export LD_LIBRARY_PATH="$SCRIPT_DIR/../lib:$LD_LIBRARY_PATH"
          exec "$SCRIPT_DIR/frankenphp.real" "$@"
          EOF
          chmod +x dist/bin/frankenphp
          
          # Create index.php
          cat > dist/index.php << EOF
          <?php
          echo "FrankenPHP v${{ inputs.frankenphp_version }} with PHP " . PHP_VERSION . "\\n";
          echo "Composer: " . trim(shell_exec(\$_SERVER['PWD'] . "/bin/composer --version")) . "\\n\\n";
          echo "PHP Extensions:\\n";
          \$extensions = get_loaded_extensions();
          sort(\$extensions);
          echo implode(", ", \$extensions) . "\\n";
          ?>
          EOF
          
          # Create Caddyfile
          cat > dist/Caddyfile << 'EOF'
          
          localhost:8000 {
              root * .
              encode gzip
              php_server
          }
          EOF

      - name: Create install.sh script
        run: |
          cat > dist/install.sh << 'EOF'
          #!/bin/bash
          # install.sh - Installation script for FrankenPHP (new installations only)

          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
          PROFILE="$HOME/.bash_profile"
          MARKER="# FrankenPHP environment setup"

          # Function to detect existing installation
          detect_existing_installation() {
              if [ "$EUID" -eq 0 ]; then
                  if [ -f "/usr/local/bin/frankenphp" ]; then
                      echo "❌ Existing system-wide installation detected!"
                      echo "   Use ./update.sh for updates instead of install.sh"
                      exit 1
                  fi
              else
                  if grep -q "$MARKER" "$PROFILE" 2>/dev/null; then
                      echo "❌ Existing user installation detected!"
                      echo "   Use ./update.sh for updates instead of install.sh"
                      exit 1
                  fi
              fi
          }

          # Function to show versions that will be installed
          show_installation_info() {
              echo "=== NEW INSTALLATION ==="
              echo ""
              echo "Installing versions:"
              echo "  FrankenPHP: $(cd "$SCRIPT_DIR" && ./bin/frankenphp.real version 2>/dev/null | head -1 || echo 'included')"
              echo "  PHP: $(cd "$SCRIPT_DIR" && ./bin/php.real --version 2>/dev/null | head -1 || echo 'included')"
              echo "  Node.js: $(cd "$SCRIPT_DIR" && ./bin/node --version 2>/dev/null || echo 'included')"
              echo "  Composer: $(cd "$SCRIPT_DIR" && LD_LIBRARY_PATH="$SCRIPT_DIR/lib" ./bin/composer --version 2>/dev/null | head -1 || echo 'included')"
              echo ""
          }

          # System-wide installation function
          install_system_wide() {
              echo "🔧 Installing system-wide..."
              mkdir -p /usr/local/lib /usr/local/libexec

              echo "  - Installing libraries..."
              cp -r "$SCRIPT_DIR/lib"/* /usr/local/lib/
              [ -d "$SCRIPT_DIR/libexec" ] && cp -r "$SCRIPT_DIR/libexec"/* /usr/local/libexec/

              echo "/usr/local/lib" > /etc/ld.so.conf.d/frankenphp.conf
              ldconfig 2>&1 | grep -v "is not a symbolic link" || true

              if [ -f "$SCRIPT_DIR/bin/git.real" ]; then
                  echo "  - Installing git..."
                  cp "$SCRIPT_DIR/bin/git.real" "/usr/local/bin/git.real"
                  chmod +x "/usr/local/bin/git.real"
                  cat > "/usr/local/bin/git" << 'EOL'
          #!/bin/bash
          export GIT_EXEC_PATH="/usr/local/libexec/git-core"
          exec "/usr/local/bin/git.real" "$@"
          EOL
                  chmod +x "/usr/local/bin/git"
              fi

              echo "  - Installing PHP and FrankenPHP..."
              for binary in frankenphp php; do
                  if [ -f "$SCRIPT_DIR/bin/$binary.real" ]; then
                      cp "$SCRIPT_DIR/bin/$binary.real" "/usr/local/bin/$binary.real"
                      chmod +x "/usr/local/bin/$binary.real"
                      cat > "/usr/local/bin/$binary" << EOL
          #!/bin/bash
          export LD_LIBRARY_PATH="/usr/local/lib:\$LD_LIBRARY_PATH"
          exec "/usr/local/bin/$binary.real" "\$@"
          EOL
                      chmod +x "/usr/local/bin/$binary"
                  fi
              done

              if [ -f "$SCRIPT_DIR/bin/node" ]; then
                  echo "  - Installing Node.js..."
                  cp "$SCRIPT_DIR/bin/node" "/usr/local/bin/node"
                  chmod +x "/usr/local/bin/node"
              fi

              echo "  - Installing additional tools..."
              for binary in composer npm npx sqlite3 zip unzip php-config phpize; do
                  if [ -f "$SCRIPT_DIR/bin/$binary" ]; then
                      if [ "$binary" = "npm" ] || [ "$binary" = "npx" ]; then
                          if [ -f "/usr/local/bin/node" ]; then
                              cat > "/usr/local/bin/$binary" << EOL
          #!/bin/bash
          export NODE_PATH="/usr/local/lib/node_modules"
          exec "/usr/local/bin/node" "/usr/local/lib/node_modules/npm/bin/$binary-cli.js" "\$@"
          EOL
                              chmod +x "/usr/local/bin/$binary"
                          fi
                      else
                          cp "$SCRIPT_DIR/bin/$binary" "/usr/local/bin/$binary"
                          chmod +x "/usr/local/bin/$binary"
                      fi
                  fi
              done

              echo ""
              echo "✅ System-wide installation completed!"
              echo ""
              echo "Installed versions:"
              /usr/local/bin/frankenphp version 2>/dev/null | head -1 | sed 's/^/  /' || echo "  FrankenPHP: ⚠️  error getting version"
              /usr/local/bin/php --version 2>/dev/null | head -1 | sed 's/^/  /' || echo "  PHP: ⚠️  error getting version"
              /usr/local/bin/composer --version 2>/dev/null | head -1 | sed 's/^/  /' || echo "  Composer: ⚠️  error getting version"
              /usr/local/bin/node --version 2>/dev/null | sed 's/^/  Node.js: /' || echo "  Node.js: ⚠️  error getting version"
              echo ""
              echo "📄 For future updates, use: ./update.sh"
          }

          # User installation function
          install_user() {
              echo "🔧 Installing for user..."
          
              [ ! -f "$PROFILE" ] && cat > "$PROFILE" << 'EOL'
          if [ -f ~/.profile ]; then . ~/.profile; fi
          if [ -f ~/.bashrc ]; then . ~/.bashrc; fi
          EOL

              cat >> "$PROFILE" << EOL
          $MARKER
          export PATH="$SCRIPT_DIR/bin:\$PATH"
          export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:\$LD_LIBRARY_PATH"
          # End of FrankenPHP environment setup
          EOL

              echo ""
              echo "✅ User installation completed!"
              echo ""
              echo "🔄 Activate the installation:"
              echo "   source ~/.bash_profile"
              echo ""
              echo "📄 For future updates, use: ./update.sh"
          }

          # Main execution
          main() {
              echo "🚀 FrankenPHP Installation Script"
              echo "================================="
          
              if [ ! -f "$SCRIPT_DIR/bin/frankenphp.real" ]; then
                  echo "❌ Error: Cannot find frankenphp.real in $SCRIPT_DIR/bin/"
                  echo "   Make sure you're running this from the extracted FrankenPHP directory"
                  exit 1
              fi
          
              detect_existing_installation
              show_installation_info
          
              if [ "$EUID" -eq 0 ]; then
                  echo "👨‍💼 Running as root - will install system-wide"
                  echo ""
                  echo "This will:"
                  echo "  - Install to /usr/local/bin and /usr/local/lib"
                  echo "  - Make tools available to all users"
                  echo "  - Work with Supervisor and systemd services"
                  echo ""
                  read -p "Continue? [y/N] " -n 1 -r
                  echo
                  [[ ! $REPLY =~ ^[Yy]$ ]] && echo "❌ Installation cancelled" && exit 1
          
                  install_system_wide
              else
                  echo "👤 Running as user - will install for current user only"
                  echo ""
                  echo "This will:"
                  echo "  - Modify ~/.bash_profile"
                  echo "  - Only work for current user"
                  echo "  - Require 'source ~/.bash_profile' after installation"
                  echo ""
                  read -p "Continue? [y/N] " -n 1 -r
                  echo
                  [[ ! $REPLY =~ ^[Yy]$ ]] && echo "❌ Installation cancelled" && exit 1
          
                  install_user
              fi
          }

          main "$@"
          EOF
          chmod +x dist/install.sh

      - name: Create update.sh script
        run: |
          cat > dist/update.sh << 'EOFSCRIPT'
          #!/bin/bash
          # update.sh - Dedicated update script for FrankenPHP

          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
          MARKER="# FrankenPHP environment setup"

          check_running_processes() {
              local running_processes=$(pgrep -f frankenphp 2>/dev/null || true)
              if [ -n "$running_processes" ]; then
                  echo "⚠️  FrankenPHP processes are currently running:"
                  ps aux | grep -v grep | grep frankenphp || true
                  echo ""
                  return 0
              fi
              return 1
          }

          stop_services() {
              echo "🛑 Stopping FrankenPHP services..."
          
              if command -v supervisorctl >/dev/null 2>&1; then
                  echo "  - Stopping Supervisor services..."
                  sudo supervisorctl stop all 2>/dev/null || true
                  sleep 3
              fi
          
              local remaining=$(pgrep -f frankenphp 2>/dev/null || true)
              if [ -n "$remaining" ]; then
                  echo "  - Killing remaining FrankenPHP processes..."
