name: Build FrankenPHP with PHP 8.3 and 8.4

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight to check for new FrankenPHP releases

jobs:
  check-new-release:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.get-latest.outputs.latest_version }}
      has_new_version: ${{ steps.check-new.outputs.has_new_version }}
      php83_latest: ${{ steps.get-php-versions.outputs.php83_latest }}
      php84_latest: ${{ steps.get-php-versions.outputs.php84_latest }}

    steps:
      - name: Get current FrankenPHP version
        id: get-current
        run: |
          echo "current_version=1.4.0" >> $GITHUB_OUTPUT

      - name: Get latest release from GitHub API
        id: get-latest
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/dunglas/frankenphp/releases/latest | jq -r '.tag_name' | sed 's/v//')
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Check if there's a new version
        id: check-new
        run: |
          CURRENT_VERSION="${{ steps.get-current.outputs.current_version }}"
          LATEST_VERSION="${{ steps.get-latest.outputs.latest_version }}"
          
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "New FrankenPHP version available: $LATEST_VERSION (current: $CURRENT_VERSION)"
            echo "has_new_version=true" >> $GITHUB_OUTPUT
          else
            echo "No new FrankenPHP version available. Current version: $CURRENT_VERSION"
            echo "has_new_version=false" >> $GITHUB_OUTPUT
          fi

      - name: Get latest PHP 8.3 and 8.4 versions
        id: get-php-versions
        run: |
          # Get latest PHP 8.3.x version
          PHP83_LATEST=$(curl -s 'https://www.php.net/releases/index.php?json&version=8.3' | jq -r '.version')
          echo "php83_latest=$PHP83_LATEST" >> $GITHUB_OUTPUT
          echo "Latest PHP 8.3: $PHP83_LATEST"
          
          # Get latest PHP 8.4.x version
          PHP84_LATEST=$(curl -s 'https://www.php.net/releases/index.php?json&version=8.4' | jq -r '.version')
          echo "php84_latest=$PHP84_LATEST" >> $GITHUB_OUTPUT
          echo "Latest PHP 8.4: $PHP84_LATEST"

  build-php:
    needs: check-new-release
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'pull_request' || needs.check-new-release.outputs.has_new_version == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        php:
          - { version: '${{ needs.check-new-release.outputs.php83_latest }}', short: 'php83' }
          - { version: '${{ needs.check-new-release.outputs.php84_latest }}', short: 'php84' }

    env:
      FRANKENPHP_VERSION: ${{ needs.check-new-release.outputs.latest_version }}
      PHP_VERSION: ${{ matrix.php.version }}
      PHP_SHORT: ${{ matrix.php.short }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl ca-certificates \
            pkg-config libssl-dev zlib1g-dev libxml2-dev libbrotli-dev \
            autoconf automake libtool libsqlite3-dev libcurl4-openssl-dev libonig-dev \
            libmariadb-dev libmariadb-dev-compat \
            libzip-dev libpng-dev libjpeg-dev libfreetype6-dev \
            libicu-dev libxslt1-dev sqlite3 zip unzip git

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: false

      - name: Install Node.js
        run: |
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs

      - name: Get PHP ${{ env.PHP_VERSION }}
        run: |
          curl -L https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz -o php.tar.gz
          tar xf php.tar.gz

      - name: Configure and Build PHP
        run: |
          cd php-${{ env.PHP_VERSION }}/
          ./configure \
            --enable-embed \
            --enable-zts \
            --disable-zend-signals \
            --enable-zend-max-execution-timers \
            --enable-cli \
            --enable-mbstring \
            --with-openssl \
            --enable-xml \
            --enable-ctype \
            --with-curl \
            --enable-dom \
            --enable-fileinfo \
            --enable-filter \
            --enable-hash \
            --enable-pdo \
            --with-pdo-sqlite \
            --with-pdo-mysql \
            --with-mysqli \
            --enable-session \
            --enable-tokenizer \
            --enable-bcmath \
            --with-zip \
            --with-gd \
            --enable-gd \
            --with-freetype \
            --with-jpeg \
            --enable-intl \
            --with-sqlite3 \
            --with-zlib \
            --enable-pcntl
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Get FrankenPHP
        run: |
          curl -L https://github.com/dunglas/frankenphp/archive/refs/tags/v${FRANKENPHP_VERSION}.tar.gz | tar xz

      - name: Build FrankenPHP with rpath
        working-directory: frankenphp-${{ env.FRANKENPHP_VERSION }}/caddy/frankenphp
        run: |
          CGO_CFLAGS=$(php-config --includes) \
          CGO_LDFLAGS="$(php-config --ldflags) $(php-config --libs) -Wl,-rpath,\$ORIGIN/../lib -Wl,-rpath,/opt/frankenphp/lib" \
          go build -tags=nobadger,nomysql,nopgx,nowatcher

      - name: Download Composer
        run: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
          ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
          
          if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
            echo "ERROR: Invalid composer installer checksum" >&2
            rm composer-setup.php
            exit 1
          fi
          
          php composer-setup.php --quiet
          rm composer-setup.php

      - name: Install FrankenPHP and tools to /usr/local
        run: |
          # Create directories
          sudo mkdir -p /usr/local/lib/frankenphp
          sudo mkdir -p /usr/local/libexec/git-core
          
          # Copy PHP shared library
          PHP_LIB_PATH="$(php-config --prefix)/lib/libphp.so"
          if [ -f "$PHP_LIB_PATH" ]; then
            sudo cp "$PHP_LIB_PATH" /usr/local/lib/frankenphp/
            echo "Copied libphp.so from $PHP_LIB_PATH"
          else
            echo "ERROR: Cannot find libphp.so at $PHP_LIB_PATH"
            find /usr/local -name "libphp.so"
            exit 1
          fi
          
          # PHP binaries are already installed to /usr/local/bin by 'make install' - keep them as-is
          echo "PHP binaries already installed to /usr/local/bin"
          
          # Install composer (force overwrite if exists)
          sudo cp composer.phar /usr/local/bin/composer
          sudo chmod +x /usr/local/bin/composer
          echo "Installed composer to /usr/local/bin"
          
          # Install sqlite3, zip, unzip (force overwrite)
          for tool in sqlite3 zip unzip; do
            if command -v $tool &> /dev/null; then
              sudo cp $(which $tool) /usr/local/bin/
              echo "Installed $tool to /usr/local/bin"
            fi
          done
          
          # Install git (force overwrite with wrapper for git-core support)
          if command -v git &> /dev/null; then
            sudo cp $(which git) /usr/local/bin/git.real
            GIT_EXEC_PATH=$(git --exec-path)
            if [ -d "$GIT_EXEC_PATH" ]; then
              sudo cp -r "$GIT_EXEC_PATH"/* /usr/local/libexec/git-core/
              sudo tee /usr/local/bin/git << 'EOF'
          #!/bin/bash
          export GIT_EXEC_PATH="/usr/local/libexec/git-core"
          exec "/usr/local/bin/git.real" "$@"
          EOF
              sudo chmod +x /usr/local/bin/git
              echo "Installed git with git-core support to /usr/local/bin"
            fi
          fi
          
          # Install Node.js and npm (force overwrite)
          # Node.js is already installed to /usr/local/bin by earlier step
          if command -v node &> /dev/null; then
            echo "Using existing Node.js installation in /usr/local/bin"
            
            # Find where npm is actually installed
            NPM_PREFIX=$(npm config get prefix)
            echo "NPM prefix: $NPM_PREFIX"
            
            sudo mkdir -p /usr/local/lib/node_modules
            
            # Look for npm in common locations
            NPM_SOURCE=""
            for npm_path in "$NPM_PREFIX/lib/node_modules/npm" "/usr/lib/node_modules/npm" "/usr/local/lib/node_modules/npm"; do
              if [ -d "$npm_path" ]; then
                NPM_SOURCE="$npm_path"
                echo "Found npm at: $NPM_SOURCE"
                break
              fi
            done
            
            if [ -n "$NPM_SOURCE" ] && [ -d "$NPM_SOURCE" ]; then
              sudo rm -rf /usr/local/lib/node_modules/npm
              sudo cp -r "$NPM_SOURCE" /usr/local/lib/node_modules/
              echo "Copied npm modules to /usr/local/lib/node_modules/"
            else
              echo "Warning: Could not find npm modules directory"
              echo "Available locations:"
              find /usr -name "npm" -type d 2>/dev/null | head -5
            fi
            
            sudo tee /usr/local/bin/npm << 'EOF'
          #!/bin/bash
          export NODE_PATH="/usr/local/lib/node_modules"
          exec "/usr/local/bin/node" "/usr/local/lib/node_modules/npm/bin/npm-cli.js" "$@"
          EOF
            sudo chmod +x /usr/local/bin/npm
            sudo tee /usr/local/bin/npx << 'EOF'
          #!/bin/bash
          export NODE_PATH="/usr/local/lib/node_modules"
          exec "/usr/local/bin/node" "/usr/local/lib/node_modules/npm/bin/npx-cli.js" "$@"
          EOF
            sudo chmod +x /usr/local/bin/npx
            echo "Installed npm and npx to /usr/local/bin"
          fi
          
          # Install git (force overwrite with wrapper for git-core support)
          if command -v git &> /dev/null; then
            sudo cp $(which git) /usr/local/bin/git.real
            GIT_EXEC_PATH=$(git --exec-path)
            if [ -d "$GIT_EXEC_PATH" ]; then
              sudo cp -r "$GIT_EXEC_PATH"/* /usr/local/libexec/git-core/
              sudo tee /usr/local/bin/git << 'EOF'
          #!/bin/bash
          export GIT_EXEC_PATH="/usr/local/libexec/git-core"
          exec "/usr/local/bin/git.real" "$@"
          EOF
              sudo chmod +x /usr/local/bin/git
              echo "Installed git with git-core support to /usr/local/bin"
            fi
          fi
          
          # Install Node.js and npm (force overwrite)
          if command -v node &> /dev/null; then
            sudo cp $(which node) /usr/local/bin/
            echo "Installed node to /usr/local/bin"
            
            NPM_PREFIX=$(npm config get prefix)
            sudo mkdir -p /usr/local/lib/node_modules
            if [ -d "$NPM_PREFIX/lib/node_modules/npm" ]; then
              sudo rm -rf /usr/local/lib/node_modules/npm
              sudo cp -r "$NPM_PREFIX/lib/node_modules/npm" /usr/local/lib/node_modules/
            fi
            sudo tee /usr/local/bin/npm << 'EOF'
          #!/bin/bash
          export NODE_PATH="/usr/local/lib/node_modules"
          exec "/usr/local/bin/node" "/usr/local/lib/node_modules/npm/bin/npm-cli.js" "$@"
          EOF
            sudo chmod +x /usr/local/bin/npm
            sudo tee /usr/local/bin/npx << 'EOF'
          #!/bin/bash
          export NODE_PATH="/usr/local/lib/node_modules"
          exec "/usr/local/bin/node" "/usr/local/lib/node_modules/npm/bin/npx-cli.js" "$@"
          EOF
            sudo chmod +x /usr/local/bin/npx
            echo "Installed npm and npx to /usr/local/bin"
          fi
          
          # Install FrankenPHP binary (force overwrite)
          sudo cp frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp /usr/local/bin/frankenphp
          sudo chmod +x /usr/local/bin/frankenphp
          echo "Installed frankenphp to /usr/local/bin"
          
          # Copy all required shared libraries to /usr/local/lib/frankenphp
          echo "Installing shared library dependencies..."
          PHP_BIN_PATH="$(php-config --prefix)/bin"
          for binary in frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp "$PHP_BIN_PATH/php" "$PHP_LIB_PATH"; do
            if [ -f "$binary" ]; then
              ldd "$binary" | grep "=> /" | awk '{print $3}' | grep -v "libc.so" | grep -v "ld-linux" | while read lib; do
                if [ -f "$lib" ]; then
                  sudo cp -v "$lib" /usr/local/lib/frankenphp/
                fi
              done
            fi
          done
          
          # Copy additional common libraries to /usr/local/lib/frankenphp
          for lib in libzip.so* libpng16.so* libjpeg.so* libfreetype.so* libicu*.so* libonig.so* libxml2.so* libxslt.so* libgd.so* libssl.so* libcrypto.so* libcurl.so* libmariadb.so*; do
            find /usr/lib /usr/lib64 /usr/lib/x86_64-linux-gnu /usr/local/lib -name "$lib" -exec sudo cp -v {} /usr/local/lib/frankenphp/ \; 2>/dev/null || true
          done
          
          # Update ldconfig to include our libraries
          echo "/usr/local/lib/frankenphp" | sudo tee /etc/ld.so.conf.d/frankenphp.conf
          sudo ldconfig
          
          echo "Installation completed successfully!"
      - name: Create demo files and archive
        run: |
          # Create a temporary directory for packaging
          mkdir -p package
          
          # Create index.php
          cat > package/index.php << EOF
          <?php
          echo "FrankenPHP v${FRANKENPHP_VERSION} with PHP " . PHP_VERSION . "\\n";
          echo "Composer: " . trim(shell_exec("composer --version")) . "\\n\\n";
          echo "PHP Extensions:\\n";
          \$extensions = get_loaded_extensions();
          sort(\$extensions);
          echo implode(", ", \$extensions) . "\\n";
          ?>
          EOF
          
          # Create Caddyfile
          cat > package/Caddyfile << 'EOF'
          {
              frankenphp
              order php_server before file_server
          }
          
          localhost:8080 {
              root * .
              encode gzip
              php_server
          }
          EOF
          
          # Create README
          cat > package/README.md << 'EOF'
          # FrankenPHP Distribution
          
          This distribution has been pre-installed to `/usr/local/bin` and is ready to use.
          
          ## Quick Start Demo
          
          Test FrankenPHP immediately:
          ```bash
          cd /path/to/this/directory
          frankenphp run
          # Visit http://localhost:8080 to see phpinfo
          ```
          
          The included `Caddyfile` serves the demo `index.php` file.
          
          ## Included Tools (all in /usr/local/bin)
          - FrankenPHP, PHP 8.x, Composer
          - Node.js 20.x LTS, npm, npx
          - Git, sqlite3, zip/unzip
          
          ## PHP Extensions
          Core, DOM, MB, XML, PDO, MySQL, SQLite, GD, Zlib, Curl, OpenSSL, BCMath, Intl, PCNTL, and more.
          
          ## Laravel Octane Support
          Includes ext-pcntl required for Laravel Octane process management.
          
          ## Libraries
          All required libraries are installed in `/usr/local/lib/frankenphp/` and configured via ldconfig.
          EOF
          
          # Create archive
          cd package
          tar -czf ../frankenphp-linux-amd64-${{ env.PHP_SHORT }}.tar.gz .
          cd ..

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: frankenphp-${{ env.PHP_SHORT }}
          path: frankenphp-linux-amd64-${{ env.PHP_SHORT }}.tar.gz
          retention-days: 7

  create-release:
    needs: [check-new-release, build-php]
    if: ${{ always() && needs.build-php.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      FRANKENPHP_VERSION: ${{ needs.check-new-release.outputs.latest_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      - name: Prepare release files
        run: |
          mkdir -p release-files
          find release-artifacts -name "*.tar.gz" -exec mv {} release-files/ \;
          echo "Files to be released:"
          ls -la release-files/

      - name: Check for existing release tag
        id: check-tag
        run: |
          STABLE_TAG="v${{ env.FRANKENPHP_VERSION }}"
          echo "stable_tag=$STABLE_TAG" >> $GITHUB_OUTPUT
          
          if git ls-remote --tags origin refs/tags/$STABLE_TAG | grep -q $STABLE_TAG; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete existing release
        if: steps.check-tag.outputs.tag_exists == 'true'
        run: |
          STABLE_TAG="${{ steps.check-tag.outputs.stable_tag }}"
          
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.ORG_RELEASE_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$STABLE_TAG" | \
            jq -r '.id')
          
          if [ "$RELEASE_ID" != "null" ]; then
            curl -s -X DELETE -H "Authorization: token ${{ secrets.ORG_RELEASE_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          fi
          
          git tag -d $STABLE_TAG || true
          git push --delete origin $STABLE_TAG || true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*
          tag_name: ${{ steps.check-tag.outputs.stable_tag }}
          name: FrankenPHP v${{ env.FRANKENPHP_VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            FrankenPHP v${{ env.FRANKENPHP_VERSION }} with PHP 8.3 and 8.4
            
            ## Quick Install
            ```bash
            tar -xzf frankenphp-linux-amd64-php84.tar.gz
            # Files are pre-installed to /usr/local/bin - ready to use!
            ```
            
            ## Quick Start Demo
            ```bash
            frankenphp run   # Starts server on http://localhost:8080
            ```
            
            ## Downloads
            - **PHP 8.3**: `frankenphp-linux-amd64-php83.tar.gz`
            - **PHP 8.4**: `frankenphp-linux-amd64-php84.tar.gz`
            
            ## What's Included
            - FrankenPHP, PHP 8.x with all common extensions, Composer (pre-installed in /usr/local/bin)
            - Node.js 20.x LTS, npm, npx (pre-installed in /usr/local/bin)
            - Git, sqlite3, zip/unzip (pre-installed in /usr/local/bin)
            - All libraries in /usr/local/lib/frankenphp with ldconfig setup
            - ext-pcntl for Laravel Octane support
            
            ## No Installation Required
            Everything is pre-installed to `/usr/local/bin` during the GitHub Actions build.
            Just extract and use immediately - perfect for containers and CI/CD!
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_RELEASE_TOKEN }}
