name: Build FrankenPHP with PHP 8.3 and 8.4

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight to check for new FrankenPHP releases

jobs:
  check-new-release:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.get-latest.outputs.latest_version }}
      has_new_version: ${{ steps.check-new.outputs.has_new_version }}
      php83_latest: ${{ steps.get-php-versions.outputs.php83_latest }}
      php84_latest: ${{ steps.get-php-versions.outputs.php84_latest }}

    steps:
      - name: Get current FrankenPHP version
        id: get-current
        run: |
          echo "current_version=1.4.0" >> $GITHUB_OUTPUT

      - name: Get latest release from GitHub API
        id: get-latest
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/php/frankenphp/releases/latest | jq -r '.tag_name' | sed 's/v//')
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Check if there's a new version
        id: check-new
        run: |
          CURRENT_VERSION="${{ steps.get-current.outputs.current_version }}"
          LATEST_VERSION="${{ steps.get-latest.outputs.latest_version }}"
          
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "New FrankenPHP version available: $LATEST_VERSION (current: $CURRENT_VERSION)"
            echo "has_new_version=true" >> $GITHUB_OUTPUT
          else
            echo "No new FrankenPHP version available. Current version: $CURRENT_VERSION"
            echo "has_new_version=false" >> $GITHUB_OUTPUT
          fi

      - name: Get latest PHP 8.3 and 8.4 versions
        id: get-php-versions
        run: |
          # Get latest PHP 8.3.x version
          PHP83_LATEST=$(curl -s 'https://www.php.net/releases/index.php?json&version=8.3' | jq -r '.version')
          echo "php83_latest=$PHP83_LATEST" >> $GITHUB_OUTPUT
          echo "Latest PHP 8.3: $PHP83_LATEST"
          
          # Get latest PHP 8.4.x version
          PHP84_LATEST=$(curl -s 'https://www.php.net/releases/index.php?json&version=8.4' | jq -r '.version')
          echo "php84_latest=$PHP84_LATEST" >> $GITHUB_OUTPUT
          echo "Latest PHP 8.4: $PHP84_LATEST"

  build-php:
    needs: check-new-release
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'pull_request' || (github.event_name == 'schedule' && needs.check-new-release.outputs.has_new_version == 'true') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        php:
          - { version: '${{ needs.check-new-release.outputs.php83_latest }}', short: 'php83' }
          - { version: '${{ needs.check-new-release.outputs.php84_latest }}', short: 'php84' }

    env:
      FRANKENPHP_VERSION: ${{ needs.check-new-release.outputs.latest_version }}
      PHP_VERSION: ${{ matrix.php.version }}
      PHP_SHORT: ${{ matrix.php.short }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl ca-certificates \
            pkg-config libssl-dev zlib1g-dev libxml2-dev libbrotli-dev \
            autoconf automake libtool libsqlite3-dev libcurl4-openssl-dev libonig-dev \
            libmariadb-dev libmariadb-dev-compat \
            libzip-dev libpng-dev libjpeg-dev libfreetype6-dev \
            libicu-dev libxslt1-dev sqlite3 zip unzip git

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: false

      - name: Install Node.js
        run: |
          # Remove any existing nodejs installation
          sudo apt-get remove -y nodejs npm npx 2>/dev/null || true
          sudo rm -rf /usr/local/bin/node /usr/local/bin/npm /usr/local/bin/npx 2>/dev/null || true
          
          # Install latest Node.js 22.x
          curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
          sudo apt-get install -y nodejs
          
          # Verify installation
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"

      - name: Get PHP ${{ env.PHP_VERSION }}
        run: |
          curl -L https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz -o php.tar.gz
          tar xf php.tar.gz

      - name: Configure and Build PHP
        run: |
          cd php-${{ env.PHP_VERSION }}/
          ./configure \
            --enable-embed \
            --enable-zts \
            --disable-zend-signals \
            --enable-zend-max-execution-timers \
            --enable-cli \
            --enable-mbstring \
            --with-openssl \
            --enable-xml \
            --enable-ctype \
            --with-curl \
            --enable-dom \
            --enable-fileinfo \
            --enable-filter \
            --enable-hash \
            --enable-pdo \
            --with-pdo-sqlite \
            --with-pdo-mysql \
            --with-mysqli \
            --enable-session \
            --enable-tokenizer \
            --enable-bcmath \
            --with-zip \
            --with-gd \
            --enable-gd \
            --with-freetype \
            --with-jpeg \
            --enable-intl \
            --with-sqlite3 \
            --with-zlib \
            --enable-pcntl \
            --enable-soap
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Create default php.ini with 512MB memory limit
        run: |
          PHP_INI_DIR="$(php-config --prefix)/lib"
          sudo mkdir -p "$PHP_INI_DIR"
          sudo tee "$PHP_INI_DIR/php.ini" > /dev/null << 'EOF'
          ; Default PHP configuration for FrankenPHP
          ; Generated with 512MB default memory limit
          
          ; Memory Settings
          memory_limit = 512M
          
          ; File Upload Settings
          upload_max_filesize = 64M
          post_max_size = 64M
          max_execution_time = 60
          max_input_time = 60
          
          ; Error Reporting (adjust for production)
          display_errors = Off
          display_startup_errors = Off
          error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
          log_errors = On
          
          ; Timezone
          date.timezone = UTC
          
          ; OPcache settings (recommended for production)
          opcache.enable=1
          opcache.memory_consumption=128
          opcache.interned_strings_buffer=8
          opcache.max_accelerated_files=10000
          opcache.validate_timestamps=1
          opcache.revalidate_freq=2
          EOF
          
          echo "Created default php.ini at $PHP_INI_DIR/php.ini"
          echo "Memory limit set to: $(grep memory_limit $PHP_INI_DIR/php.ini)"

      - name: Get FrankenPHP
        run: |
          curl -L https://github.com/php/frankenphp/archive/refs/tags/v${FRANKENPHP_VERSION}.tar.gz | tar xz

      - name: Build FrankenPHP with rpath
        working-directory: frankenphp-${{ env.FRANKENPHP_VERSION }}/caddy/frankenphp
        run: |
          CGO_CFLAGS=$(php-config --includes) \
          CGO_LDFLAGS="$(php-config --ldflags) $(php-config --libs) -Wl,-rpath,\$ORIGIN/../lib -Wl,-rpath,/opt/frankenphp/lib" \
          go build -tags=nobadger,nomysql,nopgx,nowatcher

      - name: Download Composer
        run: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
          ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
          
          if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
            echo "ERROR: Invalid composer installer checksum" >&2
            rm composer-setup.php
            exit 1
          fi
          
          php composer-setup.php --quiet
          rm composer-setup.php

      - name: Package FrankenPHP with libraries
        run: |
          # Create directories
          mkdir -p dist/lib
          mkdir -p dist/bin
          mkdir -p dist/etc
          
          # Copy php.ini to package
          PHP_INI_DIR="$(php-config --prefix)/lib"
          if [ -f "$PHP_INI_DIR/php.ini" ]; then
            cp "$PHP_INI_DIR/php.ini" dist/etc/php.ini
            echo "Packaged php.ini with memory_limit = 512M"
          fi
          
          # Copy PHP shared library
          PHP_LIB_PATH="$(php-config --prefix)/lib/libphp.so"
          if [ -f "$PHP_LIB_PATH" ]; then
            cp "$PHP_LIB_PATH" dist/lib/
            echo "Copied libphp.so from $PHP_LIB_PATH"
          else
            echo "ERROR: Cannot find libphp.so at $PHP_LIB_PATH"
            find /usr/local -name "libphp.so"
            exit 1
          fi
          
          # Copy PHP binaries
          PHP_BIN_PATH="$(php-config --prefix)/bin"
          cp "$PHP_BIN_PATH/php" dist/bin/
          cp "$PHP_BIN_PATH/php-config" dist/bin/
          cp "$PHP_BIN_PATH/phpize" dist/bin/
          cp composer.phar dist/bin/composer
          chmod +x dist/bin/composer
          
          # Copy sqlite3, zip, unzip
          for tool in sqlite3 zip unzip; do
            if command -v $tool &> /dev/null; then
              cp $(which $tool) dist/bin/
              echo "Copied $tool"
            fi
          done
          
          # Copy git and helpers
          if command -v git &> /dev/null; then
            cp $(which git) dist/bin/
            GIT_EXEC_PATH=$(git --exec-path)
            if [ -d "$GIT_EXEC_PATH" ]; then
              mkdir -p dist/libexec/git-core
              cp -r "$GIT_EXEC_PATH"/* dist/libexec/git-core/
              mv dist/bin/git dist/bin/git.real
              cat > dist/bin/git << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export GIT_EXEC_PATH="$SCRIPT_DIR/../libexec/git-core"
          exec "$SCRIPT_DIR/git.real" "$@"
          EOF
              chmod +x dist/bin/git
            fi
          fi
          
          # Copy Node.js and npm
          if command -v node &> /dev/null; then
            echo "Packaging Node.js $(node --version)..."
            
            # Copy Node.js binary
            NODE_PATH=$(which node)
            echo "Copying Node.js from: $NODE_PATH"
            cp "$NODE_PATH" dist/bin/
            
            # Get npm prefix and copy npm modules
            NPM_PREFIX=$(npm config get prefix)
            echo "npm prefix: $NPM_PREFIX"
            mkdir -p dist/lib/node_modules
            
            # Find npm installation directory
            if [ -d "$NPM_PREFIX/lib/node_modules/npm" ]; then
              echo "Copying npm from: $NPM_PREFIX/lib/node_modules/npm"
              cp -r "$NPM_PREFIX/lib/node_modules/npm" dist/lib/node_modules/
            elif [ -d "/usr/lib/node_modules/npm" ]; then
              echo "Copying npm from: /usr/lib/node_modules/npm"
              cp -r "/usr/lib/node_modules/npm" dist/lib/node_modules/
            else
              echo "Warning: npm modules not found, checking alternative locations..."
              find /usr -name "node_modules" -type d 2>/dev/null | head -5
            fi
            
            # Verify what we've packaged
            echo "Packaged Node.js version: $(dist/bin/node --version)"
            
            # Create robust npm wrapper
            cat > dist/bin/npm << 'EOF'
          #!/bin/bash
          # Resolve symlinks to get the actual script location
          SOURCE="${BASH_SOURCE[0]}"
          while [ -h "$SOURCE" ]; do
            DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
            SOURCE="$(readlink "$SOURCE")"
            [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
          done
          SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          
          export NODE_PATH="$SCRIPT_DIR/../lib/node_modules"
          if [ -f "$SCRIPT_DIR/../lib/node_modules/npm/bin/npm-cli.js" ]; then
            exec "$SCRIPT_DIR/node" "$SCRIPT_DIR/../lib/node_modules/npm/bin/npm-cli.js" "$@"
          else
            echo "Error: npm not found in package" >&2
            exit 1
          fi
          EOF
            chmod +x dist/bin/npm
            
            # Create robust npx wrapper  
            cat > dist/bin/npx << 'EOF'
          #!/bin/bash
          # Resolve symlinks to get the actual script location
          SOURCE="${BASH_SOURCE[0]}"
          while [ -h "$SOURCE" ]; do
            DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
            SOURCE="$(readlink "$SOURCE")"
            [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
          done
          SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          
          export NODE_PATH="$SCRIPT_DIR/../lib/node_modules"
          if [ -f "$SCRIPT_DIR/../lib/node_modules/npm/bin/npx-cli.js" ]; then
            exec "$SCRIPT_DIR/node" "$SCRIPT_DIR/../lib/node_modules/npm/bin/npx-cli.js" "$@"
          else
            echo "Error: npx not found in package" >&2
            exit 1
          fi
          EOF
            chmod +x dist/bin/npx
            echo "Node.js packaging completed"
          fi
          
          # Copy FrankenPHP binary
          cp frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp dist/bin/frankenphp
          chmod +x dist/bin/frankenphp
          
          # Copy all required shared libraries
          echo "Copying shared library dependencies..."
          for binary in frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp "$PHP_BIN_PATH/php" "$PHP_LIB_PATH"; do
            ldd "$binary" | grep "=> /" | awk '{print $3}' | grep -v "libc.so" | grep -v "ld-linux" | xargs -I '{}' cp -v '{}' dist/lib/ || true
          done
          
          # Copy additional common libraries
          for lib in libzip.so* libpng16.so* libjpeg.so* libfreetype.so* libicu*.so* libonig.so* libxml2.so* libxslt.so* libgd.so* libssl.so* libcrypto.so* libcurl.so* libmariadb.so*; do
            find /usr/lib /usr/lib64 /usr/lib/x86_64-linux-gnu /usr/local/lib -name "$lib" -exec cp -v {} dist/lib/ \; 2>/dev/null || true
          done
          
          # Create self-contained wrapper scripts with php.ini configuration
          mv dist/bin/php dist/bin/php.real
          cat > dist/bin/php << 'EOF'
          #!/bin/bash
          # Resolve symlinks to get the actual script location
          SOURCE="${BASH_SOURCE[0]}"
          while [ -h "$SOURCE" ]; do
            DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
            SOURCE="$(readlink "$SOURCE")"
            [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
          done
          SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          
          export LD_LIBRARY_PATH="$SCRIPT_DIR/../lib:$LD_LIBRARY_PATH"
          
          # Use packaged php.ini if available
          if [ -f "$SCRIPT_DIR/../etc/php.ini" ]; then
            exec "$SCRIPT_DIR/php.real" -c "$SCRIPT_DIR/../etc/php.ini" "$@"
          else
            exec "$SCRIPT_DIR/php.real" "$@"
          fi
          EOF
          chmod +x dist/bin/php
          
          mv dist/bin/frankenphp dist/bin/frankenphp.real
          cat > dist/bin/frankenphp << 'EOF'
          #!/bin/bash
          # Resolve symlinks to get the actual script location
          SOURCE="${BASH_SOURCE[0]}"
          while [ -h "$SOURCE" ]; do
            DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
            SOURCE="$(readlink "$SOURCE")"
            [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
          done
          SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          
          export LD_LIBRARY_PATH="$SCRIPT_DIR/../lib:$LD_LIBRARY_PATH"
          exec "$SCRIPT_DIR/frankenphp.real" "$@"
          EOF
          chmod +x dist/bin/frankenphp
          
          # Create index.php
          cat > dist/index.php << EOF
          <?php
          echo "FrankenPHP v${FRANKENPHP_VERSION} with PHP " . PHP_VERSION . "\\n";
          echo "Memory limit: " . ini_get('memory_limit') . "\\n";
          echo "Composer: " . trim(shell_exec(\$_SERVER['PWD'] . "/bin/composer --version")) . "\\n\\n";
          echo "PHP Extensions:\\n";
          \$extensions = get_loaded_extensions();
          sort(\$extensions);
          echo implode(", ", \$extensions) . "\\n";
          ?>
          EOF
          
          # Create Caddyfile
          cat > dist/Caddyfile << 'EOF'
          
          localhost:8000 {
              root * .
              encode gzip
              php_server
          }
          EOF
          
          # Create setup script
          cat > dist/install.sh << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
          PROFILE="$HOME/.bash_profile"
          MARKER="# FrankenPHP environment setup"
          
          # Function to create deferred execution script
          create_deferred_script() {
              cat > /tmp/frankenphp-deferred-install.sh << 'DEFERRED_EOF'
          #!/bin/bash
          
          SCRIPT_DIR="$1"
          UPGRADE_MODE="$2"
          
          echo "=== DEFERRED INSTALLATION STARTED ===" >> /tmp/frankenphp-install.log
          echo "$(date): Starting deferred installation" >> /tmp/frankenphp-install.log
          
          # Wait a bit to ensure SSH session is completely disconnected
          sleep 10
          
          if [ "$UPGRADE_MODE" = "true" ]; then
              echo "$(date): Performing atomic upgrade..." >> /tmp/frankenphp-install.log
              
              # Create temporary staging directory for atomic replacement
              STAGING_DIR="/tmp/frankenphp-staging-$$"
              mkdir -p "$STAGING_DIR"/{bin,lib,libexec,etc}
              
              # Stage all files first
              cp -r "$SCRIPT_DIR/lib"/* "$STAGING_DIR/lib/" 2>>/tmp/frankenphp-install.log || true
              [ -d "$SCRIPT_DIR/libexec" ] && cp -r "$SCRIPT_DIR/libexec"/* "$STAGING_DIR/libexec/" 2>>/tmp/frankenphp-install.log || true
              [ -d "$SCRIPT_DIR/etc" ] && cp -r "$SCRIPT_DIR/etc"/* "$STAGING_DIR/etc/" 2>>/tmp/frankenphp-install.log || true
              
              # Stage binaries
              for binary in frankenphp php composer node npm npx git sqlite3 zip unzip php-config phpize; do
                  if [ -f "$SCRIPT_DIR/bin/$binary" ]; then
                      cp "$SCRIPT_DIR/bin/$binary" "$STAGING_DIR/bin/" 2>>/tmp/frankenphp-install.log || true
                  fi
                  if [ -f "$SCRIPT_DIR/bin/$binary.real" ]; then
                      cp "$SCRIPT_DIR/bin/$binary.real" "$STAGING_DIR/bin/" 2>>/tmp/frankenphp-install.log || true
                  fi
              done
              
              echo "$(date): Removing old files..." >> /tmp/frankenphp-install.log
              # Clean old installation
              rm -rf /usr/local/lib/node_modules /usr/local/libexec/git-core 2>>/tmp/frankenphp-install.log || true
              rm -f /usr/local/lib/libphp.so* 2>>/tmp/frankenphp-install.log || true
              
              echo "$(date): Installing new files..." >> /tmp/frankenphp-install.log
              # Install new files
              cp -r "$STAGING_DIR/lib"/* /usr/local/lib/ 2>>/tmp/frankenphp-install.log || true
              cp -r "$STAGING_DIR/libexec"/* /usr/local/libexec/ 2>>/tmp/frankenphp-install.log || true
              cp -r "$STAGING_DIR/etc"/* /usr/local/etc/ 2>>/tmp/frankenphp-install.log || true
              
              # Install binaries atomically
              for binary in frankenphp php composer node npm npx git sqlite3 zip unzip php-config phpize; do
                  if [ -f "$STAGING_DIR/bin/$binary" ]; then
                      rm -f "/usr/local/bin/$binary" "/usr/local/bin/$binary.real" 2>>/tmp/frankenphp-install.log || true
                      cp "$STAGING_DIR/bin/$binary" "/usr/local/bin/" 2>>/tmp/frankenphp-install.log || true
                      [ -f "$STAGING_DIR/bin/$binary.real" ] && cp "$STAGING_DIR/bin/$binary.real" "/usr/local/bin/" 2>>/tmp/frankenphp-install.log || true
                      chmod +x "/usr/local/bin/$binary" "/usr/local/bin/$binary.real" 2>>/tmp/frankenphp-install.log || true
                  fi
              done
              
              # Cleanup staging
              rm -rf "$STAGING_DIR"
              echo "$(date): Atomic replacement completed" >> /tmp/frankenphp-install.log
          fi
          
          # Update ldconfig
          echo "/usr/local/lib" > /etc/ld.so.conf.d/frankenphp.conf
          ldconfig 2>>/tmp/frankenphp-install.log || true
          
          echo "$(date): Restarting Supervisor..." >> /tmp/frankenphp-install.log
          # Restart supervisor services
          if command -v supervisorctl >/dev/null 2>&1; then
              supervisorctl stop all 2>>/tmp/frankenphp-install.log || true
              sleep 5
              supervisorctl reload 2>>/tmp/frankenphp-install.log || true
              sleep 5
              supervisorctl start all 2>>/tmp/frankenphp-install.log || true
              sleep 3
              supervisorctl status >> /tmp/frankenphp-install.log 2>&1 || true
          fi
          
          echo "$(date): Verifying installation..." >> /tmp/frankenphp-install.log
          # Verify installed versions
          echo "=== FINAL VERSIONS ===" >> /tmp/frankenphp-install.log
          /usr/local/bin/frankenphp version >> /tmp/frankenphp-install.log 2>&1 || echo "FrankenPHP: ERROR" >> /tmp/frankenphp-install.log
          /usr/local/bin/php --version | head -1 >> /tmp/frankenphp-install.log 2>&1 || echo "PHP: ERROR" >> /tmp/frankenphp-install.log
          /usr/local/bin/php -i | grep memory_limit >> /tmp/frankenphp-install.log 2>&1 || echo "Memory limit: ERROR" >> /tmp/frankenphp-install.log
          /usr/local/bin/node --version >> /tmp/frankenphp-install.log 2>&1 || echo "Node.js: ERROR" >> /tmp/frankenphp-install.log
          /usr/local/bin/composer --version >> /tmp/frankenphp-install.log 2>&1 || echo "Composer: ERROR" >> /tmp/frankenphp-install.log
          echo "======================" >> /tmp/frankenphp-install.log
          
          echo "$(date): Installation completed" >> /tmp/frankenphp-install.log
          echo "=== DEFERRED INSTALLATION FINISHED ===" >> /tmp/frankenphp-install.log
          
          # Clean up this script
          rm -f /tmp/frankenphp-deferred-install.sh
          DEFERRED_EOF
              
              chmod +x /tmp/frankenphp-deferred-install.sh
          }
          
          # Function to check if FrankenPHP processes are running
          check_running_processes() {
              local running_processes=$(pgrep -f frankenphp 2>/dev/null || true)
              if [ -n "$running_processes" ]; then
                  echo "WARNING: FrankenPHP processes are currently running:"
                  ps aux | grep -v grep | grep frankenphp || true
                  echo ""
                  echo "These processes will be stopped automatically during upgrade."
                  echo "Services will be restarted after installation completes."
                  echo ""
                  echo "Stopping FrankenPHP processes..."
                  sudo supervisorctl stop all 2>/dev/null || true
                  sleep 3
                  sudo pkill -f frankenphp 2>/dev/null || true
                  sleep 2
                  echo "Processes stopped."
              fi
          }
          
          # Function to detect if this is an upgrade
          detect_upgrade() {
              if [ "$EUID" -eq 0 ]; then
                  if [ -f "/usr/local/bin/frankenphp" ]; then
                      echo "Existing system-wide FrankenPHP installation detected"
                      return 0
                  fi
              else
                  if grep -q "$MARKER" "$PROFILE" 2>/dev/null; then
                      echo "Existing user FrankenPHP installation detected"
                      return 0
                  fi
              fi
              return 1
          }
          
          # Function to backup current installation
          backup_installation() {
              local backup_dir="/tmp/frankenphp-backup-$(date +%Y%m%d-%H%M%S)"
              echo "Creating backup at: $backup_dir"
          
              if [ "$EUID" -eq 0 ]; then
                  mkdir -p "$backup_dir"/{bin,lib,libexec,etc}
                  for binary in frankenphp php composer node npm npx git sqlite3 zip unzip php-config phpize; do
                      [ -f "/usr/local/bin/$binary" ] && cp "/usr/local/bin/$binary" "$backup_dir/bin/" 2>/dev/null || true
                      [ -f "/usr/local/bin/$binary.real" ] && cp "/usr/local/bin/$binary.real" "$backup_dir/bin/" 2>/dev/null || true
                  done
                  [ -f "/usr/local/lib/libphp.so" ] && cp /usr/local/lib/libphp.so* "$backup_dir/lib/" 2>/dev/null || true
                  [ -f "/usr/local/etc/php.ini" ] && cp /usr/local/etc/php.ini "$backup_dir/etc/" 2>/dev/null || true
              else
                  [ -f "$PROFILE" ] && cp "$PROFILE" "${PROFILE}.backup-$(date +%Y%m%d-%H%M%S)"
              fi
              echo "$backup_dir" > /tmp/frankenphp-last-backup
              echo "Backup created successfully."
          }
          
          # Function to show current versions
          show_versions() {
              echo "=== CURRENT VERSIONS ==="
              if [ "$EUID" -eq 0 ]; then
                  /usr/local/bin/frankenphp version 2>/dev/null | head -1 || echo "FrankenPHP: not found"
                  /usr/local/bin/php --version 2>/dev/null | head -1 || echo "PHP: not found"
                  /usr/local/bin/php -r "echo 'Memory limit: ' . ini_get('memory_limit') . PHP_EOL;" 2>/dev/null || echo "Memory limit: not found"
                  /usr/local/bin/node --version 2>/dev/null | sed 's/^/Node.js: /' || echo "Node.js: not found"
              else
                  command -v frankenphp >/dev/null && frankenphp version 2>/dev/null | head -1 || echo "FrankenPHP: not found"
                  command -v php >/dev/null && php --version 2>/dev/null | head -1 || echo "PHP: not found"
                  command -v php >/dev/null && php -r "echo 'Memory limit: ' . ini_get('memory_limit') . PHP_EOL;" 2>/dev/null || echo "Memory limit: not found"
                  command -v node >/dev/null && echo "Node.js: $(node --version)" || echo "Node.js: not found"
              fi
              echo ""
              echo "=== NEW VERSIONS (from package) ==="
              echo "FrankenPHP: $(cd "$SCRIPT_DIR" && ./bin/frankenphp.real version 2>/dev/null | head -1 || echo 'included')"
              echo "PHP: $(cd "$SCRIPT_DIR" && ./bin/php.real --version 2>/dev/null | head -1 || echo 'included')"
              echo "Memory limit: $(cd "$SCRIPT_DIR" && ./bin/php.real -c "$SCRIPT_DIR/etc/php.ini" -r "echo ini_get('memory_limit');" 2>/dev/null || echo '512M')"
              echo "Node.js: $(cd "$SCRIPT_DIR" && ./bin/node --version 2>/dev/null || echo 'included')"
              echo ""
          }
          
          # Main installation logic
          if detect_upgrade; then
              echo "=== UPGRADE MODE ==="
              show_versions
              echo "⚠️  This will:"
              echo "   - Stop running FrankenPHP processes"  
              echo "   - Replace system binaries (SSH session may disconnect)"
              echo "   - Automatically restart Supervisor services"
              echo "   - Continue installation after SSH disconnection"
              echo ""
          
              # Check for running processes first
              check_running_processes
          
              read -p "Continue with upgrade? [y/N] " -n 1 -r
              echo
              [[ ! $REPLY =~ ^[Yy]$ ]] && echo "Upgrade cancelled" && exit 1
          
              backup_installation
          
              if [ "$EUID" -eq 0 ]; then
                  echo ""
                  echo "🔄 Setting up deferred installation..."
                  echo "   This will continue after your SSH session disconnects."
                  echo "   Check progress with: tail -f /tmp/frankenphp-install.log"
                  echo ""
                  
                  # Create the deferred installation script
                  create_deferred_script
                  
                  # Schedule deferred execution
                  echo "Starting deferred installation in background..."
                  nohup /tmp/frankenphp-deferred-install.sh "$SCRIPT_DIR" "true" &
                  
                  echo "✅ Upgrade initiated successfully!"
                  echo ""
                  echo "The upgrade will continue automatically after SSH disconnection."
                  echo "To monitor progress: tail -f /tmp/frankenphp-install.log"
                  echo ""
                  echo "Your SSH session will disconnect shortly as binaries are replaced."
                  echo "Reconnect after ~2 minutes to verify the upgrade completed."
                  echo ""
                  
                  exit 0
              fi
          else
              echo "=== NEW INSTALLATION ==="
              show_versions
          fi
          
          if [ "$EUID" -eq 0 ]; then
            # Skip installation if we already did atomic upgrade
            if ! detect_upgrade; then
              echo "Installing system-wide..."
              mkdir -p /usr/local/lib /usr/local/libexec /usr/local/etc
            
              # Copy libraries first
              echo "Installing libraries..."
              cp -r "$SCRIPT_DIR/lib"/* /usr/local/lib/
              [ -d "$SCRIPT_DIR/libexec" ] && cp -r "$SCRIPT_DIR/libexec"/* /usr/local/libexec/
              
              # Copy php.ini
              if [ -f "$SCRIPT_DIR/etc/php.ini" ]; then
                echo "Installing php.ini with 512MB memory limit..."
                cp "$SCRIPT_DIR/etc/php.ini" /usr/local/etc/php.ini
              fi
            
              # Install git with wrapper (if present)
              if [ -f "$SCRIPT_DIR/bin/git.real" ]; then
                echo "Installing git..."
                cp "$SCRIPT_DIR/bin/git.real" "/usr/local/bin/git.real"
                chmod +x "/usr/local/bin/git.real"
                cat > "/usr/local/bin/git" << 'EOL'
          #!/bin/bash
          export GIT_EXEC_PATH="/usr/local/libexec/git-core"
          exec "/usr/local/bin/git.real" "$@"
          EOL
                chmod +x "/usr/local/bin/git"
              fi
            
              # Install binaries that need LD_LIBRARY_PATH
              echo "Installing PHP and FrankenPHP..."
              for binary in frankenphp php; do
                if [ -f "$SCRIPT_DIR/bin/$binary.real" ]; then
                  cp "$SCRIPT_DIR/bin/$binary.real" "/usr/local/bin/$binary.real"
                  chmod +x "/usr/local/bin/$binary.real"
                  
                  if [ "$binary" = "php" ]; then
                    # PHP wrapper with php.ini support
                    cat > "/usr/local/bin/$binary" << EOL
          #!/bin/bash
          export LD_LIBRARY_PATH="/usr/local/lib:\$LD_LIBRARY_PATH"
          if [ -f "/usr/local/etc/php.ini" ]; then
            exec "/usr/local/bin/$binary.real" -c "/usr/local/etc/php.ini" "\$@"
          else
            exec "/usr/local/bin/$binary.real" "\$@"
          fi
          EOL
                  else
                    # FrankenPHP wrapper
                    cat > "/usr/local/bin/$binary" << EOL
          #!/bin/bash
          export LD_LIBRARY_PATH="/usr/local/lib:\$LD_LIBRARY_PATH"
          exec "/usr/local/bin/$binary.real" "\$@"
          EOL
                  fi
                  chmod +x "/usr/local/bin/$binary"
                fi
              done
            
              # Install Node.js first (needed for npm/npx)
              if [ -f "$SCRIPT_DIR/bin/node" ]; then
                echo "Installing Node.js..."
                cp "$SCRIPT_DIR/bin/node" "/usr/local/bin/node"
                chmod +x "/usr/local/bin/node"
              fi
            
              # Install other binaries
              echo "Installing additional tools..."
              for binary in composer npm npx sqlite3 zip unzip php-config phpize; do
                if [ -f "$SCRIPT_DIR/bin/$binary" ]; then
                  if [ "$binary" = "npm" ] || [ "$binary" = "npx" ]; then
                    # Node.js wrapper scripts (only if node is available)
                    if [ -f "/usr/local/bin/node" ]; then
                      cat > "/usr/local/bin/$binary" << EOL
          #!/bin/bash
          export NODE_PATH="/usr/local/lib/node_modules"
          if [ -f "/usr/local/lib/node_modules/npm/bin/$binary-cli.js" ]; then
            exec "/usr/local/bin/node" "/usr/local/lib/node_modules/npm/bin/$binary-cli.js" "\$@"
          else
            echo "Error: $binary not found in system installation" >&2
            exit 1
          fi
          EOL
                      chmod +x "/usr/local/bin/$binary"
                    fi
                  else
                    # Direct copy for other tools
                    cp "$SCRIPT_DIR/bin/$binary" "/usr/local/bin/$binary"
                    chmod +x "/usr/local/bin/$binary"
                  fi
                fi
              done
            fi
            
            # Update ldconfig for both new installs and upgrades
            echo "Updating library cache..."
            echo "/usr/local/lib" > /etc/ld.so.conf.d/frankenphp.conf
            ldconfig 2>&1 | grep -v "is not a symbolic link" || true
          
            # Final status
            echo ""
            echo "=== INSTALLATION COMPLETED ==="
            echo "Libraries: /usr/local/lib"
            echo "Binaries: /usr/local/bin"
            echo "Configuration: /usr/local/etc/php.ini"
            echo ""
            echo "✅ Installed versions:"
            /usr/local/bin/frankenphp version 2>/dev/null | head -1 || echo "FrankenPHP: ⚠️  error getting version"
            /usr/local/bin/php --version 2>/dev/null | head -1 || echo "PHP: ⚠️  error getting version"
            /usr/local/bin/php -r "echo 'Memory limit: ' . ini_get('memory_limit') . PHP_EOL;" 2>/dev/null || echo "Memory limit: ⚠️  error getting value"
            /usr/local/bin/composer --version 2>/dev/null | head -1 || echo "Composer: ⚠️  error getting version"
            /usr/local/bin/node --version 2>/dev/null | sed 's/^/Node.js: /' || echo "Node.js: ⚠️  error getting version"
          
            [ -f "/tmp/frankenphp-last-backup" ] && echo "" && echo "📦 Backup: $(cat /tmp/frankenphp-last-backup)"
          
            # Automatically restart supervisor services if this is an upgrade
            if detect_upgrade; then
              echo ""
              echo "🔄 Automatically restarting Supervisor services..."
              
              # Check if supervisor is running
              if command -v supervisorctl >/dev/null 2>&1; then
                echo "Reloading Supervisor configuration..."
                supervisorctl reload 2>/dev/null || echo "Could not reload Supervisor"
                sleep 3
                
                echo "Starting all Supervisor services..."
                supervisorctl start all 2>/dev/null || echo "Could not start services"
                sleep 2
                
                echo "Service status:"
                supervisorctl status 2>/dev/null || echo "Could not get service status"
                echo "✅ Supervisor services restarted automatically"
              else
                echo "⚠️  Supervisor not found - manual service restart may be needed"
              fi
            else
              echo ""
              echo "🔄 For production use, configure Supervisor to manage FrankenPHP:"
              echo "   sudo supervisorctl reload    # Reload Supervisor config"
              echo "   sudo supervisorctl start all # Start all services"
            fi
            echo ""
          else
            # User installation with php.ini support
            [ ! -f "$PROFILE" ] && cat > "$PROFILE" << 'EOL'
          if [ -f ~/.profile ]; then . ~/.profile; fi
          if [ -f ~/.bashrc ]; then . ~/.bashrc; fi
          EOL
          
            grep -q "$MARKER" "$PROFILE" 2>/dev/null && sed -i.bak "/^$MARKER/,/^# End of FrankenPHP environment setup/d" "$PROFILE"
            
            # Copy php.ini to user directory
            mkdir -p "$HOME/.config/frankenphp"
            if [ -f "$SCRIPT_DIR/etc/php.ini" ]; then
              cp "$SCRIPT_DIR/etc/php.ini" "$HOME/.config/frankenphp/php.ini"
              echo "Installed php.ini with 512MB memory limit to: $HOME/.config/frankenphp/php.ini"
            fi
          
            cat >> "$PROFILE" << EOL
          $MARKER
          export PATH="$SCRIPT_DIR/bin:\$PATH"
          export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:\$LD_LIBRARY_PATH"
          export PHPRC="$HOME/.config/frankenphp/php.ini"
          # End of FrankenPHP environment setup
          EOL
          
            echo "User installation completed! Run: source ~/.bash_profile"
            echo "PHP configured with 512MB memory limit"
          fi
          EOF
          chmod +x dist/install.sh
          
          # Create README
          cat > dist/README.md << 'EOF'
          # FrankenPHP Distribution
          
          ## Installation
          
          ### System-wide (recommended for servers)
          ```bash
          sudo ./install.sh
          ```
          
          ### User-only
          ```bash
          ./install.sh
          source ~/.bash_profile
          ```
          
          ## Quick Start Demo
          
          After installation, test FrankenPHP immediately:
          ```bash
          cd /path/to/frankenphp-directory
          frankenphp run
          # Visit http://localhost:8000 to see phpinfo
          ```
          
          The included `Caddyfile` serves the demo `index.php` file.
          
          ## Default Configuration
          
          This build includes a pre-configured `php.ini` with:
          - **Memory limit: 512M** (default)
          - Upload max filesize: 64M
          - Post max size: 64M
          - Max execution time: 60s
          - OPcache enabled for production performance
          
          Configuration file locations:
          - System-wide: `/usr/local/etc/php.ini`
          - User install: `~/.config/frankenphp/php.ini`
          
          You can modify these settings by editing the php.ini file.
          
          ## Included Tools
          - FrankenPHP, PHP 8.x (with 512MB default memory), Composer
          - Node.js 22.x LTS, npm, npx
          - Git, sqlite3, zip/unzip
          
          ## PHP Extensions
          Core, DOM, MB, XML, PDO, MySQL, SQLite, GD, Zlib, Curl, OpenSSL, BCMath, Intl, PCNTL, and more.
          
          ## Laravel Octane Support
          Includes ext-pcntl required for Laravel Octane process management.
          EOF
          
          # Create archive
          cd dist
          tar -czf ../frankenphp-linux-amd64-${{ env.PHP_SHORT }}.tar.gz .
          cd ..

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: frankenphp-${{ env.PHP_SHORT }}
          path: frankenphp-linux-amd64-${{ env.PHP_SHORT }}.tar.gz
          retention-days: 7

  create-release:
    needs: [check-new-release, build-php]
    if: ${{ always() && needs.build-php.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      FRANKENPHP_VERSION: ${{ needs.check-new-release.outputs.latest_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      - name: Prepare release files
        run: |
          mkdir -p release-files
          find release-artifacts -name "*.tar.gz" -exec mv {} release-files/ \;
          echo "Files to be released:"
          ls -la release-files/

      - name: Check for existing release tag
        id: check-tag
        run: |
          STABLE_TAG="v${{ env.FRANKENPHP_VERSION }}"
          echo "stable_tag=$STABLE_TAG" >> $GITHUB_OUTPUT
          
          if git ls-remote --tags origin refs/tags/$STABLE_TAG | grep -q $STABLE_TAG; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete existing release
        if: steps.check-tag.outputs.tag_exists == 'true'
        run: |
          STABLE_TAG="${{ steps.check-tag.outputs.stable_tag }}"
          
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.ORG_RELEASE_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$STABLE_TAG" | \
            jq -r '.id')
          
          if [ "$RELEASE_ID" != "null" ]; then
            curl -s -X DELETE -H "Authorization: token ${{ secrets.ORG_RELEASE_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          fi
          
          git tag -d $STABLE_TAG || true
          git push --delete origin $STABLE_TAG || true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*
          tag_name: ${{ steps.check-tag.outputs.stable_tag }}
          name: FrankenPHP v${{ env.FRANKENPHP_VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            FrankenPHP v${{ env.FRANKENPHP_VERSION }} with PHP 8.3 and 8.4
            
            ## Quick Install
            ```bash
            tar -xzf frankenphp-linux-amd64-php84.tar.gz
            sudo ./install.sh     # System-wide (recommended)
            ```
            
            ## Quick Start Demo
            ```bash
            frankenphp run   # Starts server on http://localhost:8080
            ```
            
            ## Downloads
            - **PHP 8.3**: `frankenphp-linux-amd64-php83.tar.gz`
            - **PHP 8.4**: `frankenphp-linux-amd64-php84.tar.gz`
            
            ## What's Included
            - FrankenPHP, PHP 8.x with all common extensions, Composer
            - **Default PHP memory limit: 512M** (configured in included php.ini)
            - Node.js 22.x LTS, npm, npx
            - Git, sqlite3, zip/unzip
            - Self-contained binaries (work with Supervisor!)
            - ext-pcntl for Laravel Octane support
            - Pre-configured php.ini with production-ready settings
            
            ## Two Install Methods
            1. **System-wide** (`sudo`): Creates `/usr/local/bin` symlinks, works everywhere
            2. **User-only**: Modifies `~/.bash_profile`, requires sourcing
            
            System-wide recommended for production servers.
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_RELEASE_TOKEN }}
