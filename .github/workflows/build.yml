name: Build FrankenPHP with PHP 8.3 and 8.4

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  # Allow manual triggering
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight to check for new FrankenPHP releases

jobs: # Check for new releases first
  check-new-release:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.get-latest.outputs.latest_version }}
      has_new_version: ${{ steps.check-new.outputs.has_new_version }}
    
    steps:
      - name: Get current FrankenPHP version
        id: get-current
        run: |
          echo "current_version=1.4.0" >> $GITHUB_OUTPUT

      - name: Get latest release from GitHub API
        id: get-latest
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/dunglas/frankenphp/releases/latest | jq -r '.tag_name' | sed 's/v//')
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Check if there's a new version
        id: check-new
        run: |
          CURRENT_VERSION="${{ steps.get-current.outputs.current_version }}"
          LATEST_VERSION="${{ steps.get-latest.outputs.latest_version }}"
          
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "New FrankenPHP version available: $LATEST_VERSION (current: $CURRENT_VERSION)"
            echo "has_new_version=true" >> $GITHUB_OUTPUT
          else
            echo "No new FrankenPHP version available. Current version: $CURRENT_VERSION"
            echo "has_new_version=false" >> $GITHUB_OUTPUT
          fi

  # Build FrankenPHP for multiple PHP versions
  build-php:
    needs: check-new-release
    # Always run for manual dispatch or push to main
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'pull_request' || needs.check-new-release.outputs.has_new_version == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php:
          - { version: '8.3.20', short: 'php83' }
          - { version: '8.4.6', short: 'php84' }
    
    env:
      FRANKENPHP_VERSION: ${{ needs.check-new-release.outputs.latest_version }}
      PHP_VERSION: ${{ matrix.php.version }}
      PHP_SHORT: ${{ matrix.php.short }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl ca-certificates \
            pkg-config libssl-dev zlib1g-dev libxml2-dev libbrotli-dev \
            autoconf automake libtool libsqlite3-dev libcurl4-openssl-dev libonig-dev \
            libmariadb-dev libmariadb-dev-compat \
            libzip-dev libpng-dev libjpeg-dev libfreetype6-dev \
            libicu-dev libxslt1-dev sqlite3 zip unzip git

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          # Disable cache since we don't have a go.sum file in the root
          cache: false

      - name: Install Node.js
        run: |
          # Install Node.js 20.x (LTS)
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs

      - name: Get PHP ${{ env.PHP_VERSION }}
        run: |
          curl -L https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz -o php.tar.gz
          tar xf php.tar.gz

      - name: Configure and Build PHP
        run: |
          cd php-${{ env.PHP_VERSION }}/
          ./configure \
            --enable-embed \
            --enable-zts \
            --disable-zend-signals \
            --enable-zend-max-execution-timers \
            --enable-cli \
            --enable-mbstring \
            --with-openssl \
            --enable-xml \
            --enable-ctype \
            --with-curl \
            --enable-dom \
            --enable-fileinfo \
            --enable-filter \
            --enable-hash \
            --enable-pdo \
            --with-pdo-sqlite \
            --with-pdo-mysql \
            --with-mysqli \
            --enable-session \
            --enable-tokenizer \
            --enable-bcmath \
            --with-zip \
            --with-gd \
            --enable-gd \
            --with-freetype \
            --with-jpeg \
            --enable-intl \
            --with-sqlite3 \
            --with-zlib
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Get FrankenPHP
        run: |
          curl -L https://github.com/dunglas/frankenphp/archive/refs/tags/v${FRANKENPHP_VERSION}.tar.gz | tar xz

      - name: Build FrankenPHP with rpath
        working-directory: frankenphp-${{ env.FRANKENPHP_VERSION }}/caddy/frankenphp
        run: |
          # Build with rpath set to both relative and absolute paths
          CGO_CFLAGS=$(php-config --includes) \
          CGO_LDFLAGS="$(php-config --ldflags) $(php-config --libs) -Wl,-rpath,\$ORIGIN/../lib -Wl,-rpath,/opt/frankenphp/lib" \
          go build -tags=nobadger,nomysql,nopgx,nowatcher

      - name: Download Composer
        run: |
          # Download and verify Composer installer
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
          ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
          
          if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
            echo "ERROR: Invalid composer installer checksum" >&2
            rm composer-setup.php
            exit 1
          fi
          
          # Install Composer
          php composer-setup.php --quiet
          rm composer-setup.php

      - name: Package FrankenPHP with libraries
        run: |
          # Create directories
          mkdir -p dist/lib
          mkdir -p dist/bin
          
          # Debug: Check if libphp.so exists and its location
          find /usr -name "libphp.so" || echo "libphp.so not found in /usr"
          php-config --prefix || echo "php-config --prefix failed"
          
          # Copy PHP shared library (with error checking)
          PHP_LIB_PATH="$(php-config --prefix)/lib/libphp.so"
          if [ -f "$PHP_LIB_PATH" ]; then
            cp "$PHP_LIB_PATH" dist/lib/
            echo "Copied libphp.so from $PHP_LIB_PATH"
          else
            echo "ERROR: Cannot find libphp.so at $PHP_LIB_PATH"
            find /usr/local -name "libphp.so"
            exit 1
          fi
          
          # Copy PHP binaries
          PHP_BIN_PATH="$(php-config --prefix)/bin"
          cp "$PHP_BIN_PATH/php" dist/bin/
          cp "$PHP_BIN_PATH/php-config" dist/bin/
          cp "$PHP_BIN_PATH/phpize" dist/bin/
          # Copy Composer
          cp composer.phar dist/bin/composer
          chmod +x dist/bin/composer
          
          # Copy sqlite3 binary if available
          if command -v sqlite3 &> /dev/null; then
              cp $(which sqlite3) dist/bin/
              echo "Copied sqlite3 binary"
          else
              echo "sqlite3 binary not found in system"
          fi
          
          # Copy zip and unzip if available
          if command -v zip &> /dev/null; then
              cp $(which zip) dist/bin/
              echo "Copied zip binary"
          fi
          
          if command -v unzip &> /dev/null; then
              cp $(which unzip) dist/bin/
              echo "Copied unzip binary"
          fi
          
          # Copy git and its dependencies
          if command -v git &> /dev/null; then
              # Copy git binary
              cp $(which git) dist/bin/
              echo "Copied git binary"
              
              # Git needs several helper programs, let's copy the essential ones
              GIT_EXEC_PATH=$(git --exec-path)
              if [ -d "$GIT_EXEC_PATH" ]; then
                  mkdir -p dist/libexec/git-core
                  # Copy ALL git helper programs
                  cp -r "$GIT_EXEC_PATH"/* dist/libexec/git-core/
                  echo "Copied git helper programs"
                  
                  # Create a wrapper for git to set GIT_EXEC_PATH
                  mv dist/bin/git dist/bin/git.real
                  cat > dist/bin/git << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export GIT_EXEC_PATH="$SCRIPT_DIR/../libexec/git-core"
          export GIT_TEMPLATE_DIR="$SCRIPT_DIR/../share/git-core/templates"
          exec "$SCRIPT_DIR/git.real" "$@"
          EOF
                  chmod +x dist/bin/git
                  echo "Created git wrapper script"
                  
                  # Copy git templates if they exist
                  GIT_TEMPLATE_DIR="/usr/share/git-core/templates"
                  if [ -d "$GIT_TEMPLATE_DIR" ]; then
                      mkdir -p dist/share/git-core
                      cp -r "$GIT_TEMPLATE_DIR" dist/share/git-core/
                      echo "Copied git templates"
                  fi
              fi
              
              # Copy git dependencies libraries
              for lib in $(ldd $(which git) | grep "=> /" | awk '{print $3}'); do
                  if [[ ! "$lib" =~ libc.so|ld-linux ]]; then
                      cp "$lib" dist/lib/ 2>/dev/null || true
                  fi
              done
          fi
          
          echo "Copied PHP binaries and Composer from $PHP_BIN_PATH"
          
          # Verify the binary exists before attempting to copy dependencies
          if [ ! -f "frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp" ]; then
            echo "ERROR: FrankenPHP binary not found!"
            find frankenphp-${FRANKENPHP_VERSION} -name "frankenphp"
            exit 1
          fi
          
          # Copy all required shared libraries
          echo "Copying shared library dependencies..."
          # Copy libraries required by FrankenPHP
          ldd frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp | grep "=> /" | awk '{print $3}' | grep -v "libc.so" | grep -v "ld-linux" | xargs -I '{}' cp -v '{}' dist/lib/ || true
          
          # Copy libraries required by PHP binary
          echo "Copying PHP binary dependencies..."
          ldd "$PHP_BIN_PATH/php" | grep "=> /" | awk '{print $3}' | grep -v "libc.so" | grep -v "ld-linux" | xargs -I '{}' cp -v '{}' dist/lib/ || true
          
          # Copy libraries required by libphp.so
          echo "Copying libphp.so dependencies..."
          ldd "$PHP_LIB_PATH" | grep "=> /" | awk '{print $3}' | grep -v "libc.so" | grep -v "ld-linux" | xargs -I '{}' cp -v '{}' dist/lib/ || true
          
          # Copy additional libraries that might be needed (common PHP dependencies)
          echo "Copying additional common libraries..."
          for lib in libzip.so* libpng16.so* libjpeg.so* libfreetype.so* libicu*.so* libonig.so* libxml2.so* libxslt.so* libgd.so* libssl.so* libcrypto.so* libcurl.so* libmariadb.so* libmysqlclient.so*; do
            find /usr/lib /usr/lib64 /usr/lib/x86_64-linux-gnu /usr/local/lib -name "$lib" -exec cp -v {} dist/lib/ \; 2>/dev/null || true
          done
          
          # Copy the FrankenPHP binary
          echo "Copying FrankenPHP binary..."
          cp frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp dist/bin/frankenphp
          chmod +x dist/bin/frankenphp
          
          # Copy Node.js and npm
          if command -v node &> /dev/null; then
              # Copy node binary
              cp $(which node) dist/bin/
              echo "Copied node binary"
              
              # Copy npm, npx and related files
              NPM_PREFIX=$(npm config get prefix)
              NODE_VERSION=$(node --version)
              
              # Create necessary directories
              mkdir -p dist/lib/node_modules
              
              # Copy npm module
              if [ -d "$NPM_PREFIX/lib/node_modules/npm" ]; then
                  cp -r "$NPM_PREFIX/lib/node_modules/npm" dist/lib/node_modules/
                  echo "Copied npm module"
              fi
              
              # Copy npm and npx executables
              if [ -f "$NPM_PREFIX/bin/npm" ]; then
                  cp "$NPM_PREFIX/bin/npm" dist/bin/
                  chmod +x dist/bin/npm
                  echo "Copied npm executable"
              fi
              
              if [ -f "$NPM_PREFIX/bin/npx" ]; then
                  cp "$NPM_PREFIX/bin/npx" dist/bin/
                  chmod +x dist/bin/npx
                  echo "Copied npx executable"
              fi
              
              # Create wrapper scripts that set NODE_PATH
              cat > dist/bin/npm-wrapper << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export NODE_PATH="$SCRIPT_DIR/../lib/node_modules"
          exec "$SCRIPT_DIR/node" "$SCRIPT_DIR/../lib/node_modules/npm/bin/npm-cli.js" "$@"
          EOF
              chmod +x dist/bin/npm-wrapper
              mv dist/bin/npm-wrapper dist/bin/npm
              
              cat > dist/bin/npx-wrapper << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export NODE_PATH="$SCRIPT_DIR/../lib/node_modules"
          exec "$SCRIPT_DIR/node" "$SCRIPT_DIR/../lib/node_modules/npm/bin/npx-cli.js" "$@"
          EOF
              chmod +x dist/bin/npx-wrapper
              mv dist/bin/npx-wrapper dist/bin/npx
              
              echo "Created npm and npx wrapper scripts"
          fi
          
          # Create self-contained wrapper scripts for critical binaries
          # These will work even without environment variables
          
          # PHP wrapper with built-in library path
          mv dist/bin/php dist/bin/php.real
          cat > dist/bin/php << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export LD_LIBRARY_PATH="$SCRIPT_DIR/../lib:$LD_LIBRARY_PATH"
          exec "$SCRIPT_DIR/php.real" "$@"
          EOF
          chmod +x dist/bin/php
          
          # FrankenPHP wrapper with built-in library path
          mv dist/bin/frankenphp dist/bin/frankenphp.real
          cat > dist/bin/frankenphp << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export LD_LIBRARY_PATH="$SCRIPT_DIR/../lib:$LD_LIBRARY_PATH"
          exec "$SCRIPT_DIR/frankenphp.real" "$@"
          EOF
          chmod +x dist/bin/frankenphp
          
          # Update composer to use wrapped PHP
          sed -i '1s/.*/#!\/usr\/bin\/env php/' dist/bin/composer
          
          echo "Created self-contained wrapper scripts"
          
          # Create index.php with version information
          cat > dist/index.php << 'EOF'
          <?php
          echo "FrankenPHP v${FRANKENPHP_VERSION} with PHP " . PHP_VERSION . "\n";
          echo "Composer: " . trim(shell_exec($_SERVER['PWD'] . "/bin/composer --version")) . "\n\n";
          
          echo "PHP Extensions:\n";
          $extensions = get_loaded_extensions();
          sort($extensions);
          echo implode(", ", $extensions) . "\n";
          ?>
          EOF
          
          # Create a demo Node.js file
          cat > dist/demo.js << 'EOF'
          console.log("Node.js version:", process.version);
          console.log("NPM location:", process.env.npm_execpath || "Not running via npm");
          console.log("Current directory:", process.cwd());
          
          // Simple HTTP server demo
          const http = require('http');
          const server = http.createServer((req, res) => {
            res.writeHead(200, { 'Content-Type': 'text/plain' });
            res.end('Hello from Node.js!\n');
          });
          
          const port = 3000;
          server.listen(port, () => {
            console.log(`Node.js server running at http://localhost:${port}/`);
          });
          EOF
          
          # Create a Caddyfile to serve the index.php on localhost:8000
          cat > dist/Caddyfile << EOF
          { 
            auto_https off
            http_port 8000
            https_port 0
            frankenphp
          }
        
          localhost:8000 {
            root * .
            encode gzip
            php_server 
          }
          EOF
      
          # Create wrapper script to add bin to PATH
          cat > dist/setup-env.sh << 'EOF'
          #!/bin/bash
          
          # Get the directory where this script is located
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
          
          # Setup configuration
          PROFILE="$HOME/.bash_profile"
          BASHRC="$HOME/.bashrc"
          MARKER="# FrankenPHP environment setup"
          
          # Create system-wide configuration for library path
          LDCONFIG_FILE="/etc/ld.so.conf.d/frankenphp.conf"
          
          echo "============================================"
          echo "FrankenPHP Installation"
          echo "============================================"
          
          # Check if running with sudo
          if [ "$EUID" -eq 0 ]; then
              echo "Running with root privileges - installing system-wide"
              
              # Create system-wide library configuration
              echo "$SCRIPT_DIR/lib" > "$LDCONFIG_FILE"
              ldconfig
              echo "Added library path to system configuration"
              
              # Create symlinks in system bin directory
              for binary in frankenphp php composer node npm npx git sqlite3 zip unzip; do
                  if [ -f "$SCRIPT_DIR/bin/$binary" ]; then
                      ln -sf "$SCRIPT_DIR/bin/$binary" "/usr/local/bin/$binary"
                      echo "Created symlink: /usr/local/bin/$binary"
                  fi
              done
              
              echo ""
              echo "System-wide installation completed!"
              echo "All users can now use the tools without environment setup."
              echo "This includes non-interactive processes like Supervisor."
          else
              echo "Running without root privileges - installing for current user only"
              
              # Create .bash_profile if it doesn't exist
              if [ ! -f "$PROFILE" ]; then
                  echo "Creating $PROFILE"
                  touch "$PROFILE"
              fi
              
              # Check if .bash_profile sources .bashrc (for interactive shells)
              if ! grep -q "source.*\.bashrc\|\..*\.bashrc" "$PROFILE" 2>/dev/null; then
                  echo "Adding .bashrc sourcing to .bash_profile"
                  cat >> "$PROFILE" << 'EOL'
          
          # Source .bashrc for interactive shells
          if [ -f ~/.bashrc ]; then
              . ~/.bashrc
          fi
          EOL
              fi
              
              # Check if already installed
              if grep -q "$MARKER" "$PROFILE" 2>/dev/null; then
                  echo ""
                  echo "FrankenPHP is already set up in $PROFILE"
                  echo "Installation path: $SCRIPT_DIR"
                  echo ""
                  echo "To reinstall, first remove the existing setup"
                  echo "from your .bash_profile file and run this again."
              else
                  # Add to .bash_profile
                  cat >> "$PROFILE" << EOL
          
          $MARKER
          export PATH="$SCRIPT_DIR/bin:\$PATH"
          export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:\$LD_LIBRARY_PATH"
          # End of FrankenPHP environment setup
          EOL
                  
                  echo ""
                  echo "User installation completed!"
                  echo "Added to: $PROFILE"
                  echo ""
                  echo "To use FrankenPHP now, run:"
                  echo "  source ~/.bash_profile"
              fi
              
              echo ""
              echo "For system-wide installation (recommended for servers):"
              echo "  sudo $0"
              echo ""
              echo "This will make the tools available for all users and services"
              echo "like Supervisor, systemd, cron, etc."
          fi
          
          echo ""
          echo "Available commands:"
          echo "  - frankenphp"
          echo "  - php"
          echo "  - composer"
          echo "  - node"
          echo "  - npm"
          echo "  - git"
          echo "  - sqlite3"
          echo "  - zip"
          echo "  - unzip"
          echo "============================================"
          EOF
          chmod +x dist/setup-env.sh
          
          # Create README file
          cat > dist/README.md << 'EOF'
          # FrankenPHP Distribution
          
          ## Installation Options
          
          ### Option 1: System-wide Installation (Recommended for Servers)
          
          ```bash
          # Install globally for all users and services
          sudo ./setup-env.sh
          
          # Test installation (works immediately, no source needed)
          php -v
          frankenphp version
          ```
          
          This method:
          - Creates symlinks in `/usr/local/bin`
          - Configures system library paths
          - Works with Supervisor, systemd, cron, etc.
          - No environment setup needed
          
          ### Option 2: User Installation
          
          ```bash
          # Install for current user only
          ./setup-env.sh
          
          # Apply changes to current session
          source ~/.bash_profile
          
          # Test installation
          php -v
          frankenphp version
          ```
          
          ## What It Does
          
          ### System-wide Installation (with sudo):
          - Adds library path to `/etc/ld.so.conf.d/frankenphp.conf`
          - Creates symlinks in `/usr/local/bin`
          - Works for all users and services immediately
          - Perfect for production servers
          
          ### User Installation:
          - Modifies `~/.bash_profile` with PATH and LD_LIBRARY_PATH
          - Ensures `.bashrc` is sourced for interactive shells
          - Good for development environments
          
          ## Available Commands
          
          - `frankenphp` - FrankenPHP web server
          - `php` - PHP runtime
          - `composer` - PHP package manager
          - `node` - Node.js runtime
          - `npm` - Node.js package manager
          - `npx` - Node.js package executor
          - `git` - Version control system
          - `sqlite3` - SQLite database tool
          - `zip` - File compression tool
          - `unzip` - File extraction tool
          
          ## Supervisor Configuration Example
          
          With system-wide installation, Supervisor configs work normally:
          
          ```ini
          [program:my-app]
          command=/usr/local/bin/php /path/to/artisan queue:work
          directory=/path/to/project
          autostart=true
          autorestart=true
          ```
          
          ## Uninstallation
          
          ### System-wide:
          ```bash
          # Remove symlinks
          sudo rm -f /usr/local/bin/{frankenphp,php,composer,node,npm,npx,git,sqlite3,zip,unzip}
          
          # Remove library configuration
          sudo rm -f /etc/ld.so.conf.d/frankenphp.conf
          sudo ldconfig
          ```
          
          ### User Installation:
          Remove the FrankenPHP section from `~/.bash_profile` between these markers:
          ```
          # FrankenPHP environment setup
          ...
          # End of FrankenPHP environment setup
          ```
          
          ## Directory Structure
          
          ```
          .
          ├── bin/              # All executables
          │   ├── frankenphp    # Self-contained wrapper
          │   ├── php           # Self-contained wrapper
          │   ├── composer
          │   ├── node
          │   ├── npm
          │   └── ...
          ├── lib/              # Shared libraries
          ├── libexec/          # Git helper programs
          ├── setup-env.sh      # Installation script
          ├── Caddyfile         # Example configuration
          ├── index.php         # Demo PHP file
          ├── demo.js           # Demo Node.js file
          └── README.md         # This file
          ```
          
          ## PHP Extensions
          
          This build includes the following PHP extensions:
          
          ### Core Extensions
          - **ctype** - Character type checking
          - **dom** - DOM XML manipulation
          - **fileinfo** - File information
          - **filter** - Data filtering
          - **hash** - Hashing functions
          - **mbstring** - Multibyte string handling
          - **session** - Session handling
          - **tokenizer** - PHP tokenizer
          - **xml** - XML parsing
          - **libxml** - LibXML support
          - **SimpleXML** - Simple XML manipulation
          - **xmlreader** - XML Reader
          - **xmlwriter** - XML Writer
          
          ### Database Extensions
          - **mysqli** - MySQL Improved Extension
          - **mysqlnd** - MySQL Native Driver
          - **pdo** - PHP Data Objects
          - **pdo_mysql** - PDO driver for MySQL
          - **pdo_sqlite** - PDO driver for SQLite
          - **sqlite3** - SQLite version 3 support
          
          ### Graphics & Images
          - **gd** - Image processing (with JPEG, PNG, WebP, FreeType support)
          
          ### Compression
          - **zlib** - Zlib compression
          - **zip** - ZIP archive support
          
          ### Network & Communication
          - **curl** - cURL library support
          - **openssl** - OpenSSL support
          - **sockets** - Socket communication
          
          ### Math & Numbers
          - **bcmath** - Arbitrary precision mathematics
          
          ### Internationalization
          - **intl** - Internationalization functions
          
          ### Other Extensions
          - **json** - JSON support
          - **pcre** - Perl Compatible Regular Expressions
          - **posix** - POSIX functions
          - **readline** - GNU Readline support
          - **xsl** - XSL transformations
