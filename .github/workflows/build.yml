name: Build FrankenPHP with PHP 8.3 and 8.4

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  # Allow manual triggering
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight to check for new FrankenPHP releases

jobs: # Check for new releases first
  check-new-release:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.get-latest.outputs.latest_version }}
      has_new_version: ${{ steps.check-new.outputs.has_new_version }}
    
    steps:
      - name: Get current FrankenPHP version
        id: get-current
        run: |
          echo "current_version=1.5.0" >> $GITHUB_OUTPUT

      - name: Get latest release from GitHub API
        id: get-latest
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/dunglas/frankenphp/releases/latest | jq -r '.tag_name' | sed 's/v//')
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Check if there's a new version
        id: check-new
        run: |
          CURRENT_VERSION="${{ steps.get-current.outputs.current_version }}"
          LATEST_VERSION="${{ steps.get-latest.outputs.latest_version }}"
          
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "New FrankenPHP version available: $LATEST_VERSION (current: $CURRENT_VERSION)"
            echo "has_new_version=true" >> $GITHUB_OUTPUT
          else
            echo "No new FrankenPHP version available. Current version: $CURRENT_VERSION"
            echo "has_new_version=false" >> $GITHUB_OUTPUT
          fi

  # Build FrankenPHP for multiple PHP versions
  build-php:
    needs: check-new-release
    # Always run for manual dispatch, push to main, or PRs, or if a new version is detected during scheduled runs
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'pull_request' || needs.check-new-release.outputs.has_new_version == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    strategy:
      matrix:
        php:
          - { version: '8.3.20', short: 'php83' }
          - { version: '8.4.6', short: 'php84' }
    
    env:
      FRANKENPHP_VERSION: ${{ needs.check-new-release.outputs.latest_version }}
      PHP_VERSION: ${{ matrix.php.version }}
      PHP_SHORT: ${{ matrix.php.short }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl ca-certificates \
            pkg-config libssl-dev zlib1g-dev libxml2-dev libbrotli-dev \
            autoconf automake libtool libsqlite3-dev libcurl4-openssl-dev libonig-dev \
            libmariadb-dev libmariadb-dev-compat \
            libzip-dev libpng-dev libjpeg-dev libfreetype6-dev \
            libicu-dev libxslt1-dev

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          # Disable cache since we don't have a go.sum file in the root
          cache: false

      - name: Get PHP ${{ env.PHP_VERSION }}
        run: |
          curl -L https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz -o php.tar.gz
          tar xf php.tar.gz

      - name: Configure and Build PHP
        run: |
          cd php-${{ env.PHP_VERSION }}/
          ./configure \
            --enable-embed \
            --enable-zts \
            --disable-zend-signals \
            --enable-zend-max-execution-timers \
            --enable-cli \
            --enable-mbstring \
            --with-openssl \
            --enable-xml \
            --enable-ctype \
            --with-curl \
            --enable-dom \
            --enable-fileinfo \
            --enable-filter \
            --enable-hash \
            --enable-pdo \
            --with-pdo-sqlite \
            --with-pdo-mysql \
            --with-mysqli \
            --enable-session \
            --enable-tokenizer \
            --enable-bcmath \
            --with-zip \
            --with-gd \
            --enable-gd \
            --with-freetype \
            --with-jpeg \
            --enable-intl \
            --with-sqlite3
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Get FrankenPHP
        run: |
          curl -L https://github.com/dunglas/frankenphp/archive/refs/tags/v${FRANKENPHP_VERSION}.tar.gz | tar xz

      - name: Build FrankenPHP with rpath
        working-directory: frankenphp-${{ env.FRANKENPHP_VERSION }}/caddy/frankenphp
        run: |
          # Build with rpath set to $ORIGIN/lib
          CGO_CFLAGS=$(php-config --includes) \
          CGO_LDFLAGS="$(php-config --ldflags) $(php-config --libs) -Wl,-rpath,\$ORIGIN/lib" \
          go build -tags=nobadger,nomysql,nopgx,nowatcher

      - name: Download Composer
        run: |
          # Download and verify Composer installer
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
          ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
          
          if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
            echo "ERROR: Invalid composer installer checksum" >&2
            rm composer-setup.php
            exit 1
          fi
          
          # Install Composer
          php composer-setup.php --quiet
          rm composer-setup.php

      - name: Package FrankenPHP with libraries
        run: |
          # Create directories
          mkdir -p dist/lib
          mkdir -p dist/bin
          
          # Debug: Check if libphp.so exists and its location
          find /usr -name "libphp.so" || echo "libphp.so not found in /usr"
          php-config --prefix || echo "php-config --prefix failed"
          
          # Copy PHP shared library (with error checking)
          PHP_LIB_PATH="$(php-config --prefix)/lib/libphp.so"
          if [ -f "$PHP_LIB_PATH" ]; then
            cp "$PHP_LIB_PATH" dist/lib/
            echo "Copied libphp.so from $PHP_LIB_PATH"
          else
            echo "ERROR: Cannot find libphp.so at $PHP_LIB_PATH"
            find /usr/local -name "libphp.so"
            exit 1
          fi
          
          # Copy PHP binaries
          PHP_BIN_PATH="$(php-config --prefix)/bin"
          cp "$PHP_BIN_PATH/php" dist/bin/
          cp "$PHP_BIN_PATH/php-config" dist/bin/
          cp "$PHP_BIN_PATH/phpize" dist/bin/
          # Copy Composer
          cp composer.phar dist/bin/composer
          chmod +x dist/bin/composer
          echo "Copied PHP binaries and Composer from $PHP_BIN_PATH"
          
          # Verify the binary exists before attempting to copy dependencies
          if [ ! -f "frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp" ]; then
            echo "ERROR: FrankenPHP binary not found!"
            find frankenphp-${FRANKENPHP_VERSION} -name "frankenphp"
            exit 1
          fi
          
          # Copy all required shared libraries
          echo "Copying shared library dependencies..."
          ldd frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp | grep "=> /" | awk '{print $3}' | grep -v "libc.so" | grep -v "ld-linux" | xargs -I '{}' cp -v '{}' dist/lib/ || true
          
          # Copy the FrankenPHP binary
          echo "Copying FrankenPHP binary..."
          cp frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp dist/frankenphp
          chmod +x dist/frankenphp
          
          # Create index.php with version information
          cat > dist/index.php << EOF
          <?php
          echo "FrankenPHP v${FRANKENPHP_VERSION} with PHP " . PHP_VERSION . "\n";
          echo "Composer: " . shell_exec(\$_SERVER['PWD'] . "/bin/composer --version") . "\n";
          
          // Display loaded extensions
          echo "\nLoaded PHP Extensions:\n";
          $extensions = get_loaded_extensions();
          sort($extensions);
          echo implode(", ", $extensions) . "\n";
          EOF
          
          # Create a Caddyfile to serve the index.php on localhost:8000
          cat > dist/Caddyfile << EOF
          { 
            auto_https off
            http_port 8000
            https_port 0
            frankenphp
          }
        
          localhost:8000 {
            root * .
            encode gzip
            php_server 
          }
          EOF
      
          # Create wrapper script to add bin to PATH
          cat > dist/setup-env.sh << EOF
          #!/bin/bash
          # Add the bin directory to PATH
          SCRIPT_DIR="\$(cd "\$(dirname "\${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
          export PATH="\$SCRIPT_DIR/bin:\$PATH"
          export LD_LIBRARY_PATH="\$SCRIPT_DIR/lib:\$LD_LIBRARY_PATH"
          echo "FrankenPHP environment set up. You can now use 'php', 'composer', and 'frankenphp' commands."
          EOF
          chmod +x dist/setup-env.sh
        
          # Create archive
          cd dist
          tar -czf ../frankenphp-linux-amd64-${{ env.PHP_SHORT }}.tar.gz .
          cd ..
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: frankenphp-${{ env.PHP_SHORT }}
          path: frankenphp-linux-amd64-${{ env.PHP_SHORT }}.tar.gz
          retention-days: 7
      
      # Check for existing release and delete if present
      - name: Manage existing release
        id: manage-release
        env:
          GH_TOKEN: ${{ secrets.ORG_RELEASE_TOKEN }}
        run: |
          # Create a stable tag name based on PHP version only
          STABLE_TAG="v${{ env.FRANKENPHP_VERSION }}-${{ env.PHP_SHORT }}"
          echo "stable_tag=$STABLE_TAG" >> $GITHUB_OUTPUT
          
          # Install GitHub CLI if not already available
          if ! command -v gh &> /dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          fi
          
          # Check if release exists and delete it
          echo "Checking for existing release with tag: $STABLE_TAG"
          if gh release view "$STABLE_TAG" --repo ${{ github.repository }} &> /dev/null; then
            echo "Existing release found. Deleting it..."
            gh release delete "$STABLE_TAG" --repo ${{ github.repository }} --yes --cleanup-tag
            echo "Release and tag deleted successfully"
          else
            echo "No existing release found"
            # Check if tag exists without release and delete it
            if git ls-remote --tags origin "refs/tags/$STABLE_TAG" | grep -q "$STABLE_TAG"; then
              echo "Found orphaned tag. Deleting it..."
              git push --delete origin "$STABLE_TAG" || true
            fi
          fi
      
      # Create release with stable tag
      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.ORG_RELEASE_TOKEN }}
        run: |
          STABLE_TAG="${{ steps.manage-release.outputs.stable_tag }}"
          
          # Create the release using GitHub CLI with inline notes
          echo "Creating new release: $STABLE_TAG"
          gh release create "$STABLE_TAG" \
            "frankenphp-linux-amd64-${{ env.PHP_SHORT }}.tar.gz" \
            --repo ${{ github.repository }} \
            --title "FrankenPHP v${{ env.FRANKENPHP_VERSION }} with PHP ${{ env.PHP_VERSION }}" \
            --notes This is an automated build of FrankenPHP v${{ env.FRANKENPHP_VERSION }} with PHP ${{ env.PHP_VERSION }}.\n\nThis release replaces any previous release for PHP ${{ env.PHP_VERSION }} to ensure only one version is maintained.\n\nLast updated: '"$(date '+%Y-%m-%d %H:%M:%S UTC')" \
            --latest=false \
            --verify-tag=false
          
          echo "Release created successfully"
