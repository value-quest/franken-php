name: Build FrankenPHP with PHP 8.3 and 8.4

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  # Allow manual triggering
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight to check for new FrankenPHP releases

jobs: # Check for new releases first
  check-new-release:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.get-latest.outputs.latest_version }}
      has_new_version: ${{ steps.check-new.outputs.has_new_version }}
    
    steps:
      - name: Get current FrankenPHP version
        id: get-current
        run: |
          echo "current_version=1.5.0" >> $GITHUB_OUTPUT

      - name: Get latest release from GitHub API
        id: get-latest
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/dunglas/frankenphp/releases/latest | jq -r '.tag_name' | sed 's/v//')
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Check if there's a new version
        id: check-new
        run: |
          CURRENT_VERSION="${{ steps.get-current.outputs.current_version }}"
          LATEST_VERSION="${{ steps.get-latest.outputs.latest_version }}"
          
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "New FrankenPHP version available: $LATEST_VERSION (current: $CURRENT_VERSION)"
            echo "has_new_version=true" >> $GITHUB_OUTPUT
          else
            echo "No new FrankenPHP version available. Current version: $CURRENT_VERSION"
            echo "has_new_version=false" >> $GITHUB_OUTPUT
          fi

  # Build FrankenPHP for multiple PHP versions
  build-php:
    needs: check-new-release
    # Always run for manual dispatch, push to main, or PRs, or if a new version is detected during scheduled runs
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'pull_request' || needs.check-new-release.outputs.has_new_version == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php:
          - { version: '8.3.20', short: 'php83' }
          - { version: '8.4.6', short: 'php84' }
    
    env:
      FRANKENPHP_VERSION: ${{ needs.check-new-release.outputs.latest_version }}
      PHP_VERSION: ${{ matrix.php.version }}
      PHP_SHORT: ${{ matrix.php.short }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl ca-certificates \
            pkg-config libssl-dev zlib1g-dev libxml2-dev libbrotli-dev \
            autoconf automake libtool libsqlite3-dev libcurl4-openssl-dev libonig-dev \
            libmariadb-dev libmariadb-dev-compat \
            libzip-dev libpng-dev libjpeg-dev libfreetype6-dev \
            libicu-dev libxslt1-dev

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          # Disable cache since we don't have a go.sum file in the root
          cache: false

      - name: Get PHP ${{ env.PHP_VERSION }}
        run: |
          curl -L https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz -o php.tar.gz
          tar xf php.tar.gz

      - name: Configure and Build PHP
        run: |
          cd php-${{ env.PHP_VERSION }}/
          ./configure \
            --enable-embed \
            --enable-zts \
            --disable-zend-signals \
            --enable-zend-max-execution-timers \
            --enable-cli \
            --enable-mbstring \
            --with-openssl \
            --enable-xml \
            --enable-ctype \
            --with-curl \
            --enable-dom \
            --enable-fileinfo \
            --enable-filter \
            --enable-hash \
            --enable-pdo \
            --with-pdo-sqlite \
            --with-pdo-mysql \
            --with-mysqli \
            --enable-session \
            --enable-tokenizer \
            --enable-bcmath \
            --with-zip \
            --with-gd \
            --enable-gd \
            --with-freetype \
            --with-jpeg \
            --enable-intl \
            --with-sqlite3
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Get FrankenPHP
        run: |
          curl -L https://github.com/dunglas/frankenphp/archive/refs/tags/v${FRANKENPHP_VERSION}.tar.gz | tar xz

      - name: Build FrankenPHP with rpath
        working-directory: frankenphp-${{ env.FRANKENPHP_VERSION }}/caddy/frankenphp
        run: |
          # Build with rpath set to both relative and absolute paths
          CGO_CFLAGS=$(php-config --includes) \
          CGO_LDFLAGS="$(php-config --ldflags) $(php-config --libs) -Wl,-rpath,\$ORIGIN/../lib -Wl,-rpath,/opt/frankenphp/lib" \
          go build -tags=nobadger,nomysql,nopgx,nowatcher

      - name: Download Composer
        run: |
          # Download and verify Composer installer
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
          ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
          
          if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
            echo "ERROR: Invalid composer installer checksum" >&2
            rm composer-setup.php
            exit 1
          fi
          
          # Install Composer
          php composer-setup.php --quiet
          rm composer-setup.php

      - name: Package FrankenPHP with libraries
        run: |
          # Create directories
          mkdir -p dist/lib
          mkdir -p dist/bin
          
          # Debug: Check if libphp.so exists and its location
          find /usr -name "libphp.so" || echo "libphp.so not found in /usr"
          php-config --prefix || echo "php-config --prefix failed"
          
          # Copy PHP shared library (with error checking)
          PHP_LIB_PATH="$(php-config --prefix)/lib/libphp.so"
          if [ -f "$PHP_LIB_PATH" ]; then
            cp "$PHP_LIB_PATH" dist/lib/
            echo "Copied libphp.so from $PHP_LIB_PATH"
          else
            echo "ERROR: Cannot find libphp.so at $PHP_LIB_PATH"
            find /usr/local -name "libphp.so"
            exit 1
          fi
          
          # Copy PHP binaries
          PHP_BIN_PATH="$(php-config --prefix)/bin"
          cp "$PHP_BIN_PATH/php" dist/bin/
          cp "$PHP_BIN_PATH/php-config" dist/bin/
          cp "$PHP_BIN_PATH/phpize" dist/bin/
          # Copy Composer
          cp composer.phar dist/bin/composer
          chmod +x dist/bin/composer
          echo "Copied PHP binaries and Composer from $PHP_BIN_PATH"
          
          # Verify the binary exists before attempting to copy dependencies
          if [ ! -f "frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp" ]; then
            echo "ERROR: FrankenPHP binary not found!"
            find frankenphp-${FRANKENPHP_VERSION} -name "frankenphp"
            exit 1
          fi
          
          # Copy all required shared libraries
          echo "Copying shared library dependencies..."
          # Copy libraries required by FrankenPHP
          ldd frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp | grep "=> /" | awk '{print $3}' | grep -v "libc.so" | grep -v "ld-linux" | xargs -I '{}' cp -v '{}' dist/lib/ || true
          
          # Copy libraries required by PHP binary
          echo "Copying PHP binary dependencies..."
          ldd "$PHP_BIN_PATH/php" | grep "=> /" | awk '{print $3}' | grep -v "libc.so" | grep -v "ld-linux" | xargs -I '{}' cp -v '{}' dist/lib/ || true
          
          # Copy libraries required by libphp.so
          echo "Copying libphp.so dependencies..."
          ldd "$PHP_LIB_PATH" | grep "=> /" | awk '{print $3}' | grep -v "libc.so" | grep -v "ld-linux" | xargs -I '{}' cp -v '{}' dist/lib/ || true
          
          # Copy additional libraries that might be needed (common PHP dependencies)
          echo "Copying additional common libraries..."
          for lib in libzip.so* libpng16.so* libjpeg.so* libfreetype.so* libicu*.so* libonig.so* libxml2.so* libxslt.so* libgd.so* libssl.so* libcrypto.so* libcurl.so* libmariadb.so* libmysqlclient.so*; do
            find /usr/lib /usr/lib64 /usr/lib/x86_64-linux-gnu /usr/local/lib -name "$lib" -exec cp -v {} dist/lib/ \; 2>/dev/null || true
          done
          
          # Copy the FrankenPHP binary to bin directory
          echo "Copying FrankenPHP binary..."
          cp frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp dist/bin/frankenphp
          chmod +x dist/bin/frankenphp
          
          # Create index.php with version information
          cat > dist/index.php << EOF
          <?php
          echo "FrankenPHP v${FRANKENPHP_VERSION} with PHP " . PHP_VERSION . "\n";
          echo "Composer: " . shell_exec(\$_SERVER['PWD'] . "/bin/composer --version") . "\n";
          
          // Display loaded extensions
          echo "\nLoaded PHP Extensions:\n";
          $extensions = get_loaded_extensions();
          sort($extensions);
          echo implode(", ", $extensions) . "\n";
          EOF
          
          # Create a Caddyfile to serve the index.php on localhost:8000
          cat > dist/Caddyfile << EOF
          { 
            auto_https off
            http_port 8000
            https_port 0
            frankenphp
          }
        
          localhost:8000 {
            root * .
            encode gzip
            php_server 
          }
          EOF
      
          # Create README file
          cat > dist/README.md << 'EOF'
          # FrankenPHP Distribution
          
          ## Quick Start
          
          ### For permanent setup (RECOMMENDED for servers):
          ```bash
          ./setup-env.sh --permanent
          source ~/.bashrc
          ```
          
          ### For current session only:
          ```bash
          source setup-env.sh
          ```
          
          ## Setup Options
          
          The setup script supports multiple options:
          
          ```bash
          # Set up for current session only
          source setup-env.sh
          
          # Make setup permanent (adds to ~/.bashrc)
          ./setup-env.sh --permanent
          
          # Remove permanent setup
          ./setup-env.sh --remove
          
          # Show help
          ./setup-env.sh --help
          ```
          
          ## Usage
          
          After setup, you can use:
          ```bash
          frankenphp version
          php -v
          composer --version
          ```
          
          ## Running the Demo Server
          ```bash
          frankenphp run --config Caddyfile
          ```
          
          ## Uninstalling
          
          To remove the permanent setup:
          ```bash
          ./setup-env.sh --remove
          ```
          
          ## Troubleshooting
          
          If you get errors like "cannot open shared object file":
          1. Make sure you have run the setup script
          2. For permanent setup: `./setup-env.sh --permanent`
          3. For temporary setup: `source setup-env.sh`
          
          ## Contents
          - `bin/` - Binary executables
          - `lib/` - Shared libraries
          - `setup-env.sh` - Environment setup script (with permanent option)
          - `Caddyfile` - Example Caddy configuration
          - `index.php` - Demo PHP file
          EOF
          
          # Create setup instructions file
          cat > dist/SETUP_INSTRUCTIONS.txt << 'EOF'
          ============================================
          IMPORTANT: SETUP REQUIRED BEFORE USE
          ============================================
          
          You MUST run the following command before using FrankenPHP:
          
              source setup-env.sh
          
          This command sets up the environment variables needed for the
          binaries to find their shared libraries.
          
          Without this step, you will get errors like:
          "error while loading shared libraries: libzip.so.4: cannot open shared object file"
          
          For permanent setup, add the source command to your ~/.bashrc
          ============================================
          EOF
          
          # Create wrapper script to add bin to PATH
          cat > dist/setup-env.sh << 'EOF'
          #!/bin/bash
          
          # Get the directory where this script is located
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
          
          # Function to set up environment for current session
          setup_current_session() {
              export PATH="$SCRIPT_DIR/bin:$PATH"
              export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:$LD_LIBRARY_PATH"
              echo "Environment set up for current session."
          }
          
          # Function to make setup permanent
          make_permanent() {
              local BASHRC="$HOME/.bashrc"
              local MARKER="# FrankenPHP environment setup"
              
              # Check if already installed
              if grep -q "$MARKER" "$BASHRC" 2>/dev/null; then
                  echo "FrankenPHP environment is already set up in $BASHRC"
                  echo "To update the installation path, first remove the existing setup with:"
                  echo "  $0 --remove"
                  echo "Then run the setup again."
                  return 1
              fi
              
              # Create backup directory if it doesn't exist
              mkdir -p "$HOME/.backup"
              
              # Backup .bashrc
              cp "$BASHRC" "$HOME/.backup/.bashrc.$(date +%Y%m%d_%H%M%S)"
              echo "Created backup of .bashrc"
              
              # Add to .bashrc
              cat >> "$BASHRC" << EOL
          
          $MARKER
          export PATH="$SCRIPT_DIR/bin:\$PATH"
          export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:\$LD_LIBRARY_PATH"
          # End of FrankenPHP environment setup
          EOL
              
              echo "============================================"
              echo "Permanent setup completed!"
              echo "Added FrankenPHP environment to $BASHRC"
              echo ""
              echo "To apply changes to current session, run:"
              echo "  source ~/.bashrc"
              echo ""
              echo "Or start a new terminal session."
              echo "============================================"
          }
          
          # Function to remove permanent setup
          remove_permanent() {
              local BASHRC="$HOME/.bashrc"
              local MARKER="# FrankenPHP environment setup"
              
              if ! grep -q "$MARKER" "$BASHRC" 2>/dev/null; then
                  echo "FrankenPHP environment setup not found in $BASHRC"
                  return 1
              fi
              
              # Create backup directory if it doesn't exist
              mkdir -p "$HOME/.backup"
              
              # Backup .bashrc
              cp "$BASHRC" "$HOME/.backup/.bashrc.$(date +%Y%m%d_%H%M%S)"
              echo "Created backup of .bashrc"
              
              # Remove FrankenPHP setup
              sed -i "/$MARKER/,/# End of FrankenPHP environment setup/d" "$BASHRC"
              echo "Removed FrankenPHP environment setup from $BASHRC"
          }
          
          # Main script logic
          case "$1" in
              "--remove"|"-r")
                  remove_permanent
                  ;;
              "--temporary"|"-t"|"--temp")
                  setup_current_session
                  echo "============================================"
                  echo "FrankenPHP environment set up for current session only!"
                  echo "============================================"
                  echo ""
                  echo "You can now use:"
                  echo "  - frankenphp"
                  echo "  - php"
                  echo "  - composer"
                  echo ""
                  echo "Note: This is temporary. For permanent setup, run:"
                  echo "  $0"
                  echo "============================================"
                  ;;
              "--help"|"-h")
                  echo "FrankenPHP Setup Script"
                  echo ""
                  echo "Usage:"
                  echo "  ./setup-env.sh                # Install permanently (DEFAULT)"
                  echo "  ./setup-env.sh --temporary    # Set up for current session only"
                  echo "  ./setup-env.sh --remove       # Remove permanent setup from ~/.bashrc"
                  echo "  ./setup-env.sh --help         # Show this help message"
                  echo ""
                  echo "Options:"
                  echo "  (default)         Make setup permanent (adds to ~/.bashrc)"
                  echo "  -t, --temporary   Set up for current session only"
                  echo "  -r, --remove      Remove permanent setup from ~/.bashrc"
                  echo "  -h, --help        Show this help message"
                  echo ""
                  echo "For source usage (current session only):"
                  echo "  source setup-env.sh"
                  ;;
              "")
                  # Default behavior - make it permanent
                  make_permanent
                  ;;
              *)
                  echo "Unknown option: $1"
                  echo "Run '$0 --help' for usage information"
                  exit 1
                  ;;
          esac
          
          # Special handling when sourced (for backward compatibility)
          if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
              # Script is being sourced
              setup_current_session
              echo "============================================"
              echo "FrankenPHP environment set up for current session!"
              echo "============================================"
              echo ""
              echo "You can now use:"
              echo "  - frankenphp"
              echo "  - php"
              echo "  - composer"
              echo ""
              echo "Note: When sourced, setup is temporary."
              echo "For permanent setup, run: ./$0"
              echo "============================================"
          fi
          EOF
          chmod +x dist/setup-env.sh
        
          # Create wrapper scripts that automatically set up the environment
          echo "Creating wrapper scripts..."
          
          # FrankenPHP wrapper
          cat > dist/frankenphp << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:$LD_LIBRARY_PATH"
          exec "$SCRIPT_DIR/bin/frankenphp" "$@"
          EOF
          chmod +x dist/frankenphp
          
          # PHP wrapper
          cat > dist/php << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:$LD_LIBRARY_PATH"
          exec "$SCRIPT_DIR/bin/php" "$@"
          EOF
          chmod +x dist/php
          
          # Composer wrapper
          cat > dist/composer << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:$LD_LIBRARY_PATH"
          exec "$SCRIPT_DIR/bin/php" "$SCRIPT_DIR/bin/composer" "$@"
          EOF
          chmod +x dist/composer
        
          # Create archive
          cd dist
          tar -czf ../frankenphp-linux-amd64-${{ env.PHP_SHORT }}.tar.gz .
          cd ..
          
          # Create wrapper scripts for direct execution
          mkdir -p dist-wrapped
          cp -r dist/* dist-wrapped/
          
          # Create wrapper scripts that automatically set LD_LIBRARY_PATH
          for binary in frankenphp php composer; do
            cat > dist-wrapped/bin/${binary}-wrapper << EOF
          #!/bin/bash
          SCRIPT_DIR="\$(cd "\$(dirname "\$0")" && pwd)"
          export LD_LIBRARY_PATH="\$SCRIPT_DIR/../lib:\$LD_LIBRARY_PATH"
          exec "\$SCRIPT_DIR/${binary}" "\$@"
          EOF
            chmod +x dist-wrapped/bin/${binary}-wrapper
            # Optionally rename the wrapper to the original name
            mv dist-wrapped/bin/${binary} dist-wrapped/bin/${binary}.real
            mv dist-wrapped/bin/${binary}-wrapper dist-wrapped/bin/${binary}
          done
          
          # Create the final archive with wrappers
          cd dist-wrapped
          tar -czf ../frankenphp-linux-amd64-${{ env.PHP_SHORT }}-wrapped.tar.gz .
          cd ..
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: frankenphp-${{ env.PHP_SHORT }}
          path: frankenphp-linux-amd64-${{ env.PHP_SHORT }}.tar.gz
          retention-days: 7

  # Create a single release with all artifacts
  create-release:
    needs: [check-new-release, build-php]
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'pull_request' || needs.check-new-release.outputs.has_new_version == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    env:
      FRANKENPHP_VERSION: ${{ needs.check-new-release.outputs.latest_version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Download all artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      # Prepare all files for release
      - name: Prepare release files
        run: |
          mkdir -p release-files
          # Move all tar.gz files to release directory
          find release-artifacts -name "*.tar.gz" -exec mv {} release-files/ \;
          # List all files that will be released
          echo "Files to be released:"
          ls -la release-files/

      # Check for existing release tag
      - name: Check for existing release tag
        id: check-tag
        run: |
          # Create a stable tag name based on FrankenPHP version only
          STABLE_TAG="v${{ env.FRANKENPHP_VERSION }}"
          echo "stable_tag=$STABLE_TAG" >> $GITHUB_OUTPUT
          
          # Check if tag exists
          if git ls-remote --tags origin refs/tags/$STABLE_TAG | grep -q $STABLE_TAG; then
            echo "Tag $STABLE_TAG already exists, will be replaced"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag $STABLE_TAG doesn't exist yet"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi
      
      # Delete existing release if it exists
      - name: Delete existing release
        if: steps.check-tag.outputs.tag_exists == 'true'
        run: |
          # Delete existing tag
          STABLE_TAG="${{ steps.check-tag.outputs.stable_tag }}"
          
          # Use GitHub API to get the release ID
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.ORG_RELEASE_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$STABLE_TAG" | \
            jq -r '.id')
          
          if [ "$RELEASE_ID" != "null" ]; then
            echo "Deleting existing release with ID: $RELEASE_ID"
            curl -s -X DELETE -H "Authorization: token ${{ secrets.ORG_RELEASE_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          fi
          
          # Delete existing tag (both locally and remotely)
          git tag -d $STABLE_TAG || true
          git push --delete origin $STABLE_TAG || true
          
          echo "Existing release and tag deleted"
      
      # Create release with all PHP version assets
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*
          tag_name: ${{ steps.check-tag.outputs.stable_tag }}
          name: FrankenPHP v${{ env.FRANKENPHP_VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            This is an automated build of FrankenPHP v${{ env.FRANKENPHP_VERSION }} with multiple PHP versions.
            
            ## ⚠️ Setup Required
            
            **For servers (permanent setup):**
            ```bash
            ./setup-env.sh --permanent
            source ~/.bashrc
            ```
            
            **For testing (current session only):**
            ```bash
            source setup-env.sh
            ```
            
            ## Available Downloads:
            - **PHP 8.3**: `frankenphp-linux-amd64-php83.tar.gz`
            - **PHP 8.4**: `frankenphp-linux-amd64-php84.tar.gz`
            
            ## Quick Start:
            ```bash
            tar -xzf frankenphp-linux-amd64-php84.tar.gz
            cd frankenphp-linux-amd64-php84
            ./setup-env.sh --permanent
            source ~/.bashrc
            frankenphp version
            ```
            
            ## Features:
            - Includes FrankenPHP binary
            - PHP runtime
            - Composer
            - All necessary shared libraries
            - Setup script with permanent installation option
            - README with detailed instructions
            
            ## Setup Script Options:
            - `./setup-env.sh --permanent` - Add to ~/.bashrc for permanent setup
            - `source setup-env.sh` - Set up for current session only
            - `./setup-env.sh --remove` - Remove permanent setup
            - `./setup-env.sh --help` - Show all options
            
            Last updated: $(date)
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_RELEASE_TOKEN }}
