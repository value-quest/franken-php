name: Build FrankenPHP with PHP 8.3 and 8.4

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight to check for new FrankenPHP releases

jobs:
  check-new-release:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.get-latest.outputs.latest_version }}
      has_new_version: ${{ steps.check-new.outputs.has_new_version }}
      php83_latest: ${{ steps.get-php-versions.outputs.php83_latest }}
      php84_latest: ${{ steps.get-php-versions.outputs.php84_latest }}

    steps:
      - name: Get current FrankenPHP version
        id: get-current
        run: |
          echo "current_version=1.4.0" >> $GITHUB_OUTPUT

      - name: Get latest release from GitHub API
        id: get-latest
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/php/frankenphp/releases/latest | jq -r '.tag_name' | sed 's/v//')
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Check if there's a new version
        id: check-new
        run: |
          CURRENT_VERSION="${{ steps.get-current.outputs.current_version }}"
          LATEST_VERSION="${{ steps.get-latest.outputs.latest_version }}"
          
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "New FrankenPHP version available: $LATEST_VERSION (current: $CURRENT_VERSION)"
            echo "has_new_version=true" >> $GITHUB_OUTPUT
          else
            echo "No new FrankenPHP version available. Current version: $CURRENT_VERSION"
            echo "has_new_version=false" >> $GITHUB_OUTPUT
          fi

      - name: Get latest PHP 8.3 and 8.4 versions
        id: get-php-versions
        run: |
          # Get latest PHP 8.3.x version
          PHP83_LATEST=$(curl -s 'https://www.php.net/releases/index.php?json&version=8.3' | jq -r '.version')
          echo "php83_latest=$PHP83_LATEST" >> $GITHUB_OUTPUT
          echo "Latest PHP 8.3: $PHP83_LATEST"
          
          # Get latest PHP 8.4.x version
          PHP84_LATEST=$(curl -s 'https://www.php.net/releases/index.php?json&version=8.4' | jq -r '.version')
          echo "php84_latest=$PHP84_LATEST" >> $GITHUB_OUTPUT
          echo "Latest PHP 8.4: $PHP84_LATEST"

  build-php:
    needs: check-new-release
    if: ${{
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' ||
      github.event_name == 'pull_request' ||
      (github.event_name == 'schedule' && needs.check-new-release.outputs.has_new_version == 'true')
    }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        php:
          - { version: '${{ needs.check-new-release.outputs.php83_latest }}', short: 'php83' }
          - { version: '${{ needs.check-new-release.outputs.php84_latest }}', short: 'php84' }

    env:
      FRANKENPHP_VERSION: ${{ needs.check-new-release.outputs.latest_version }}
      PHP_VERSION: ${{ matrix.php.version }}
      PHP_SHORT: ${{ matrix.php.short }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl ca-certificates \
            pkg-config libssl-dev zlib1g-dev libxml2-dev libbrotli-dev \
            autoconf automake libtool libsqlite3-dev libcurl4-openssl-dev libonig-dev \
            libmariadb-dev libmariadb-dev-compat \
            libzip-dev libpng-dev libjpeg-dev libfreetype6-dev \
            libicu-dev libxslt1-dev sqlite3 zip unzip git

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: false

      - name: Install Node.js
        run: |
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs

      - name: Get PHP ${{ env.PHP_VERSION }}
        run: |
          curl -L https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz -o php.tar.gz
          tar xf php.tar.gz

      - name: Configure and Build PHP
        run: |
          cd php-${{ env.PHP_VERSION }}/
          ./configure \
            --enable-embed \
            --enable-zts \
            --disable-zend-signals \
            --enable-zend-max-execution-timers \
            --enable-cli \
            --enable-mbstring \
            --with-openssl \
            --enable-xml \
            --enable-ctype \
            --with-curl \
            --enable-dom \
            --enable-fileinfo \
            --enable-filter \
            --enable-hash \
            --enable-pdo \
            --with-pdo-sqlite \
            --with-pdo-mysql \
            --with-mysqli \
            --enable-session \
            --enable-tokenizer \
            --enable-bcmath \
            --with-zip \
            --with-gd \
            --enable-gd \
            --with-freetype \
            --with-jpeg \
            --enable-intl \
            --with-sqlite3 \
            --with-zlib \
            --enable-pcntl
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Get FrankenPHP
        run: |
          curl -L https://github.com/dunglas/frankenphp/archive/refs/tags/v${FRANKENPHP_VERSION}.tar.gz | tar xz

      - name: Build FrankenPHP with rpath
        working-directory: frankenphp-${{ env.FRANKENPHP_VERSION }}/caddy/frankenphp
        run: |
          CGO_CFLAGS=$(php-config --includes) \
          CGO_LDFLAGS="$(php-config --ldflags) $(php-config --libs) -Wl,-rpath,\$ORIGIN/../lib -Wl,-rpath,/opt/frankenphp/lib" \
          go build -tags=nobadger,nomysql,nopgx,nowatcher

      - name: Download Composer
        run: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
          ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
          
          if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
            echo "ERROR: Invalid composer installer checksum" >&2
            rm composer-setup.php
            exit 1
          fi
          
          php composer-setup.php --quiet
          rm composer-setup.php

      - name: Package FrankenPHP with libraries
        run: |
          # Create directories
          mkdir -p dist/lib
          mkdir -p dist/bin
          
          # Copy PHP shared library
          PHP_LIB_PATH="$(php-config --prefix)/lib/libphp.so"
          if [ -f "$PHP_LIB_PATH" ]; then
            cp "$PHP_LIB_PATH" dist/lib/
            echo "Copied libphp.so from $PHP_LIB_PATH"
          else
            echo "ERROR: Cannot find libphp.so at $PHP_LIB_PATH"
            find /usr/local -name "libphp.so"
            exit 1
          fi
          
          # Copy PHP binaries
          PHP_BIN_PATH="$(php-config --prefix)/bin"
          cp "$PHP_BIN_PATH/php" dist/bin/
          cp "$PHP_BIN_PATH/php-config" dist/bin/
          cp "$PHP_BIN_PATH/phpize" dist/bin/
          cp composer.phar dist/bin/composer
          chmod +x dist/bin/composer
          
          # Copy sqlite3, zip, unzip
          for tool in sqlite3 zip unzip; do
            if command -v $tool &> /dev/null; then
              cp $(which $tool) dist/bin/
              echo "Copied $tool"
            fi
          done
          
          # Copy git and helpers
          if command -v git &> /dev/null; then
            cp $(which git) dist/bin/
            GIT_EXEC_PATH=$(git --exec-path)
            if [ -d "$GIT_EXEC_PATH" ]; then
              mkdir -p dist/libexec/git-core
              cp -r "$GIT_EXEC_PATH"/* dist/libexec/git-core/
              mv dist/bin/git dist/bin/git.real
              cat > dist/bin/git << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export GIT_EXEC_PATH="$SCRIPT_DIR/../libexec/git-core"
          exec "$SCRIPT_DIR/git.real" "$@"
          EOF
              chmod +x dist/bin/git
            fi
          fi
          
          # Copy Node.js and npm
          if command -v node &> /dev/null; then
            cp $(which node) dist/bin/
            NPM_PREFIX=$(npm config get prefix)
            mkdir -p dist/lib/node_modules
            if [ -d "$NPM_PREFIX/lib/node_modules/npm" ]; then
              cp -r "$NPM_PREFIX/lib/node_modules/npm" dist/lib/node_modules/
            fi
            cat > dist/bin/npm << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export NODE_PATH="$SCRIPT_DIR/../lib/node_modules"
          exec "$SCRIPT_DIR/node" "$SCRIPT_DIR/../lib/node_modules/npm/bin/npm-cli.js" "$@"
          EOF
            chmod +x dist/bin/npm
            cat > dist/bin/npx << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export NODE_PATH="$SCRIPT_DIR/../lib/node_modules"
          exec "$SCRIPT_DIR/node" "$SCRIPT_DIR/../lib/node_modules/npm/bin/npx-cli.js" "$@"
          EOF
            chmod +x dist/bin/npx
          fi
          
          # Copy FrankenPHP binary
          cp frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp dist/bin/frankenphp
          chmod +x dist/bin/frankenphp
          
          # Copy all required shared libraries
          echo "Copying shared library dependencies..."
          for binary in frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp "$PHP_BIN_PATH/php" "$PHP_LIB_PATH"; do
            ldd "$binary" | grep "=> /" | awk '{print $3}' | grep -v "libc.so" | grep -v "ld-linux" | xargs -I '{}' cp -v '{}' dist/lib/ || true
          done
          
          # Copy additional common libraries
          for lib in libzip.so* libpng16.so* libjpeg.so* libfreetype.so* libicu*.so* libonig.so* libxml2.so* libxslt.so* libgd.so* libssl.so* libcrypto.so* libcurl.so* libmariadb.so*; do
            find /usr/lib /usr/lib64 /usr/lib/x86_64-linux-gnu /usr/local/lib -name "$lib" -exec cp -v {} dist/lib/ \; 2>/dev/null || true
          done
          
          # Create self-contained wrapper scripts
          mv dist/bin/php dist/bin/php.real
          cat > dist/bin/php << 'EOF'
          #!/bin/bash
          # Resolve symlinks to get the actual script location
          SOURCE="${BASH_SOURCE[0]}"
          while [ -h "$SOURCE" ]; do
            DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
            SOURCE="$(readlink "$SOURCE")"
            [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
          done
          SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          
          export LD_LIBRARY_PATH="$SCRIPT_DIR/../lib:$LD_LIBRARY_PATH"
          exec "$SCRIPT_DIR/php.real" "$@"
          EOF
          chmod +x dist/bin/php
          
          mv dist/bin/frankenphp dist/bin/frankenphp.real
          cat > dist/bin/frankenphp << 'EOF'
          #!/bin/bash
          # Resolve symlinks to get the actual script location
          SOURCE="${BASH_SOURCE[0]}"
          while [ -h "$SOURCE" ]; do
            DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
            SOURCE="$(readlink "$SOURCE")"
            [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
          done
          SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          
          export LD_LIBRARY_PATH="$SCRIPT_DIR/../lib:$LD_LIBRARY_PATH"
          exec "$SCRIPT_DIR/frankenphp.real" "$@"
          EOF
          chmod +x dist/bin/frankenphp
          
          # Create index.php
          cat > dist/index.php << EOF
          <?php
          echo "FrankenPHP v${FRANKENPHP_VERSION} with PHP " . PHP_VERSION . "\\n";
          echo "Composer: " . trim(shell_exec(\$_SERVER['PWD'] . "/bin/composer --version")) . "\\n\\n";
          echo "PHP Extensions:\\n";
          \$extensions = get_loaded_extensions();
          sort(\$extensions);
          echo implode(", ", \$extensions) . "\\n";
          ?>
          EOF
          
          # Create Caddyfile
          cat > dist/Caddyfile << 'EOF'
          {
              frankenphp
              order php_server before file_server
          }
          
          localhost:8080 {
              root * .
              encode gzip
              php_server
          }
          EOF
          
          # Create setup script
          cat > dist/install.sh << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
          PROFILE="$HOME/.bash_profile"
          MARKER="# FrankenPHP environment setup"
          
          if [ "$EUID" -eq 0 ]; then
          echo "Installing system-wide..."
          
          # Copy libraries to /usr/local/lib
          echo "Copying libraries to /usr/local/lib..."
          mkdir -p /usr/local/lib
          cp -r "$SCRIPT_DIR/lib"/* /usr/local/lib/
          
          # Update ldconfig
          echo "/usr/local/lib" > /etc/ld.so.conf.d/frankenphp.conf
          ldconfig 2>&1 | grep -v "is not a symbolic link" || true
          
          # Copy Node.js modules to /usr/local/lib if they exist
          if [ -d "$SCRIPT_DIR/lib/node_modules" ]; then
            echo "Copying Node.js modules to /usr/local/lib..."
            mkdir -p /usr/local/lib/node_modules
            cp -r "$SCRIPT_DIR/lib/node_modules"/* /usr/local/lib/node_modules/
          fi
          
          # Copy git libexec if it exists
          if [ -d "$SCRIPT_DIR/libexec" ]; then
            echo "Copying git libexec to /usr/local/libexec..."
            mkdir -p /usr/local/libexec
            cp -r "$SCRIPT_DIR/libexec"/* /usr/local/libexec/
          fi
          
          # Handle git special case first
          if [ -f "$SCRIPT_DIR/bin/git" ] && [ -f "$SCRIPT_DIR/bin/git.real" ]; then
          # We need to install both git and git.real
          echo "Installing git wrapper and real binary..."
          
          # Handle git.real first
          if [ -d "/usr/local/bin/git.real" ]; then
          rm -rf "/usr/local/bin/git.real"
          fi
          cp "$SCRIPT_DIR/bin/git.real" "/usr/local/bin/git.real"
          chmod +x "/usr/local/bin/git.real"
          
          # Then handle git wrapper
          if [ -d "/usr/local/bin/git" ]; then
          rm -rf "/usr/local/bin/git"
          fi
          
          # Create a modified git wrapper that uses system paths
          cat > "/usr/local/bin/git" << EOL
          #!/bin/bash
          export GIT_EXEC_PATH="/usr/local/libexec/git-core"
          exec "/usr/local/bin/git.real" "\$@"
          EOL
          chmod +x "/usr/local/bin/git"
          echo "Git installation completed with system paths"
          fi
          
          # Create system-wide wrapper scripts for binaries that need LD_LIBRARY_PATH
          for binary in frankenphp php; do
          if [ -f "$SCRIPT_DIR/bin/$binary.real" ]; then
            echo "Creating system wrapper for $binary..."
            cat > "/usr/local/bin/$binary" << EOL
          #!/bin/bash
          export LD_LIBRARY_PATH="/usr/local/lib:\$LD_LIBRARY_PATH"
          exec "/usr/local/bin/$binary.real" "\$@"
          EOL
            chmod +x "/usr/local/bin/$binary"
          
            # Copy the real binary
            cp "$SCRIPT_DIR/bin/$binary.real" "/usr/local/bin/$binary.real"
            chmod +x "/usr/local/bin/$binary.real"
          fi
          done
          
          # Handle other binaries (composer, node, npm, npx, sqlite3, zip, unzip)
          for binary in composer node npm npx sqlite3 zip unzip; do
          if [ -f "$SCRIPT_DIR/bin/$binary" ]; then
            # Remove existing target if it's a directory
            if [ -d "/usr/local/bin/$binary" ]; then
              rm -rf "/usr/local/bin/$binary"
            fi
          
            # For Node.js binaries, update the wrapper scripts to use system paths
            if [ "$binary" = "npm" ] || [ "$binary" = "npx" ]; then
              if [ -f "/usr/local/bin/node" ]; then
                echo "Creating system wrapper for $binary..."
                if [ "$binary" = "npm" ]; then
                  cat > "/usr/local/bin/$binary" << EOL
          #!/bin/bash
          export NODE_PATH="/usr/local/lib/node_modules"
          exec "/usr/local/bin/node" "/usr/local/lib/node_modules/npm/bin/npm-cli.js" "\$@"
          EOL
                else
                  cat > "/usr/local/bin/$binary" << EOL
          #!/bin/bash
          export NODE_PATH="/usr/local/lib/node_modules"
          exec "/usr/local/bin/node" "/usr/local/lib/node_modules/npm/bin/npx-cli.js" "\$@"
          EOL
                fi
                chmod +x "/usr/local/bin/$binary"
              fi
            else
              # For other binaries, just copy them
              cp "$SCRIPT_DIR/bin/$binary" "/usr/local/bin/$binary"
              chmod +x "/usr/local/bin/$binary"
            fi
          fi
          done
          
          echo "System-wide installation completed!"
          echo "Libraries installed to: /usr/local/lib"
          echo "Binaries installed to: /usr/local/bin"
          else
          # For user installation, ensure .bash_profile sources other config files
          if [ ! -f "$PROFILE" ]; then
            # Create .bash_profile with proper sourcing if it doesn't exist
            cat > "$PROFILE" << EOL
          # Source .profile if it exists
          if [ -f ~/.profile ]; then
              . ~/.profile
          fi
          
          # Source .bashrc if it exists
          if [ -f ~/.bashrc ]; then
              . ~/.bashrc
          fi
          EOL
            echo "Created $PROFILE with proper sourcing"
          else
            # Check if .bash_profile already sources .profile and .bashrc
            if ! grep -q "\.profile" "$PROFILE" || ! grep -q "\.bashrc" "$PROFILE"; then
              # Backup existing file
              cp "$PROFILE" "${PROFILE}.backup"
              
              # Add sourcing at the beginning if not present
              TEMP_FILE=$(mktemp)
              cat > "$TEMP_FILE" << EOL
          # Source .profile if it exists
          if [ -f ~/.profile ]; then
              . ~/.profile
          fi
          
          # Source .bashrc if it exists
          if [ -f ~/.bashrc ]; then
              . ~/.bashrc
          fi
          
          EOL
              cat "$PROFILE" >> "$TEMP_FILE"
              mv "$TEMP_FILE" "$PROFILE"
              echo "Updated $PROFILE to source .profile and .bashrc"
            fi
          fi
          
          # Remove the existing FrankenPHP block if present
          if grep -q "$MARKER" "$PROFILE" 2>/dev/null; then
          # Remove existing FrankenPHP setup block
          sed -i.bak "/^$MARKER/,/^# End of FrankenPHP environment setup/d" "$PROFILE"
          echo "Removed previous FrankenPHP installation from $PROFILE"
          fi
          
          # Add new FrankenPHP block
          cat >> "$PROFILE" << EOL
          $MARKER
          export PATH="$SCRIPT_DIR/bin:\$PATH"
          export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:\$LD_LIBRARY_PATH"
          # End of FrankenPHP environment setup
          EOL
            echo "User installation completed! Run: source ~/.bash_profile"
          fi          
          EOF
          chmod +x dist/install.sh
          
          # Create README
          cat > dist/README.md << 'EOF'
          # FrankenPHP Distribution
          
          ## Installation
          
          ### System-wide (recommended for servers)
          ```bash
          sudo ./install.sh
          ```
          
          ### User-only
          ```bash
          ./install.sh
          source ~/.bash_profile
          ```
          
          ## Quick Start Demo
          
          After installation, test FrankenPHP immediately:
          ```bash
          cd /path/to/frankenphp-directory
          frankenphp run
          # Visit http://localhost:8080 to see phpinfo
          ```
          
          The included `Caddyfile` serves the demo `index.php` file.
          
          ## Included Tools
          - FrankenPHP, PHP 8.x, Composer
          - Node.js 20.x LTS, npm, npx
          - Git, sqlite3, zip/unzip
          
          ## PHP Extensions
          Core, DOM, MB, XML, PDO, MySQL, SQLite, GD, Zlib, Curl, OpenSSL, BCMath, Intl, PCNTL, and more.
          
          ## Laravel Octane Support
          Includes ext-pcntl required for Laravel Octane process management.
          EOF
          
          # Create archive
          cd dist
          tar -czf ../frankenphp-linux-amd64-${{ env.PHP_SHORT }}.tar.gz .
          cd ..

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: frankenphp-${{ env.PHP_SHORT }}
          path: frankenphp-linux-amd64-${{ env.PHP_SHORT }}.tar.gz
          retention-days: 7

  create-release:
    needs: [check-new-release, build-php]
    if: ${{ always() && needs.build-php.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      FRANKENPHP_VERSION: ${{ needs.check-new-release.outputs.latest_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      - name: Prepare release files
        run: |
          mkdir -p release-files
          find release-artifacts -name "*.tar.gz" -exec mv {} release-files/ \;
          echo "Files to be released:"
          ls -la release-files/

      - name: Check for existing release tag
        id: check-tag
        run: |
          STABLE_TAG="v${{ env.FRANKENPHP_VERSION }}"
          echo "stable_tag=$STABLE_TAG" >> $GITHUB_OUTPUT
          
          if git ls-remote --tags origin refs/tags/$STABLE_TAG | grep -q $STABLE_TAG; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete existing release
        if: steps.check-tag.outputs.tag_exists == 'true'
        run: |
          STABLE_TAG="${{ steps.check-tag.outputs.stable_tag }}"
          
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.ORG_RELEASE_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$STABLE_TAG" | \
            jq -r '.id')
          
          if [ "$RELEASE_ID" != "null" ]; then
            curl -s -X DELETE -H "Authorization: token ${{ secrets.ORG_RELEASE_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          fi
          
          git tag -d $STABLE_TAG || true
          git push --delete origin $STABLE_TAG || true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*
          tag_name: ${{ steps.check-tag.outputs.stable_tag }}
          name: FrankenPHP v${{ env.FRANKENPHP_VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            FrankenPHP v${{ env.FRANKENPHP_VERSION }} with PHP 8.3 and 8.4
            
            ## Quick Install
            ```bash
            tar -xzf frankenphp-linux-amd64-php84.tar.gz
            sudo ./install.sh     # System-wide (recommended)
            ```
            
            ## Quick Start Demo
            ```bash
            frankenphp run   # Starts server on http://localhost:8080
            ```
            
            ## Downloads
            - **PHP 8.3**: `frankenphp-linux-amd64-php83.tar.gz`
            - **PHP 8.4**: `frankenphp-linux-amd64-php84.tar.gz`
            
            ## What's Included
            - FrankenPHP, PHP 8.x with all common extensions, Composer
            - Node.js 20.x LTS, npm, npx
            - Git, sqlite3, zip/unzip
            - Self-contained binaries (work with Supervisor!)
            - ext-pcntl for Laravel Octane support
            
            ## Two Install Methods
            1. **System-wide** (`sudo`): Creates `/usr/local/bin` symlinks, works everywhere
            2. **User-only**: Modifies `~/.bash_profile`, requires sourcing
            
            System-wide recommended for production servers.
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_RELEASE_TOKEN }}
