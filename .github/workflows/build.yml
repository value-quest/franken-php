name: Build FrankenPHP with PHP 8.3 and 8.4

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight to check for new FrankenPHP releases

jobs:
  check-new-release:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.get-latest.outputs.latest_version }}
      has_new_version: ${{ steps.check-new.outputs.has_new_version }}
      php83_latest: ${{ steps.get-php-versions.outputs.php83_latest }}
      php84_latest: ${{ steps.get-php-versions.outputs.php84_latest }}

    steps:
      - name: Get current FrankenPHP version
        id: get-current
        run: |
          echo "current_version=1.4.0" >> $GITHUB_OUTPUT

      - name: Get latest release from GitHub API
        id: get-latest
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/php/frankenphp/releases/latest | jq -r '.tag_name' | sed 's/v//')
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Check if there's a new version
        id: check-new
        run: |
          CURRENT_VERSION="${{ steps.get-current.outputs.current_version }}"
          LATEST_VERSION="${{ steps.get-latest.outputs.latest_version }}"
          
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "New FrankenPHP version available: $LATEST_VERSION (current: $CURRENT_VERSION)"
            echo "has_new_version=true" >> $GITHUB_OUTPUT
          else
            echo "No new FrankenPHP version available. Current version: $CURRENT_VERSION"
            echo "has_new_version=false" >> $GITHUB_OUTPUT
          fi

      - name: Get latest PHP 8.3 and 8.4 versions
        id: get-php-versions
        run: |
          # Get latest PHP 8.3.x version
          PHP83_LATEST=$(curl -s 'https://www.php.net/releases/index.php?json&version=8.3' | jq -r '.version')
          echo "php83_latest=$PHP83_LATEST" >> $GITHUB_OUTPUT
          echo "Latest PHP 8.3: $PHP83_LATEST"
          
          # Get latest PHP 8.4.x version
          PHP84_LATEST=$(curl -s 'https://www.php.net/releases/index.php?json&version=8.4' | jq -r '.version')
          echo "php84_latest=$PHP84_LATEST" >> $GITHUB_OUTPUT
          echo "Latest PHP 8.4: $PHP84_LATEST"

  build-php:
    needs: check-new-release
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'pull_request' || (github.event_name == 'schedule' && needs.check-new-release.outputs.has_new_version == 'true') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        php:
          - { version: '${{ needs.check-new-release.outputs.php83_latest }}', short: 'php83' }
          - { version: '${{ needs.check-new-release.outputs.php84_latest }}', short: 'php84' }

    env:
      FRANKENPHP_VERSION: ${{ needs.check-new-release.outputs.latest_version }}
      PHP_VERSION: ${{ matrix.php.version }}
      PHP_SHORT: ${{ matrix.php.short }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl ca-certificates \
            pkg-config libssl-dev zlib1g-dev libxml2-dev libbrotli-dev \
            autoconf automake libtool libsqlite3-dev libcurl4-openssl-dev libonig-dev \
            libmariadb-dev libmariadb-dev-compat \
            libzip-dev libpng-dev libjpeg-dev libfreetype6-dev \
            libicu-dev libxslt1-dev sqlite3 zip unzip git

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: false

      - name: Install Node.js
        run: |
          sudo apt-get remove -y nodejs npm
          curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
          sudo apt-get install -y nodejs
          echo "Installed Node.js version: $(node --version)"
          echo "Node.js location: $(which node)"

      - name: Get PHP ${{ env.PHP_VERSION }}
        run: |
          curl -L https://www.php.net/distributions/php-${{ env.PHP_VERSION }}.tar.gz -o php.tar.gz
          tar xf php.tar.gz

      - name: Configure and Build PHP
        run: |
          cd php-${{ env.PHP_VERSION }}/
          ./configure \
            --enable-embed \
            --enable-zts \
            --disable-zend-signals \
            --enable-zend-max-execution-timers \
            --enable-cli \
            --enable-mbstring \
            --with-openssl \
            --enable-xml \
            --enable-ctype \
            --with-curl \
            --enable-dom \
            --enable-fileinfo \
            --enable-filter \
            --enable-hash \
            --enable-pdo \
            --with-pdo-sqlite \
            --with-pdo-mysql \
            --with-mysqli \
            --enable-session \
            --enable-tokenizer \
            --enable-bcmath \
            --with-zip \
            --with-gd \
            --enable-gd \
            --with-freetype \
            --with-jpeg \
            --enable-intl \
            --with-sqlite3 \
            --with-zlib \
            --enable-pcntl \
            --enable-soap
          make -j$(nproc)
          sudo make install
          sudo ldconfig

      - name: Get FrankenPHP
        run: |
          curl -L https://github.com/php/frankenphp/archive/refs/tags/v${FRANKENPHP_VERSION}.tar.gz | tar xz

      - name: Build FrankenPHP with rpath
        working-directory: frankenphp-${{ env.FRANKENPHP_VERSION }}/caddy/frankenphp
        run: |
          CGO_CFLAGS=$(php-config --includes) \
          CGO_LDFLAGS="$(php-config --ldflags) $(php-config --libs) -Wl,-rpath,\$ORIGIN/../lib -Wl,-rpath,/opt/frankenphp/lib" \
          go build -tags=nobadger,nomysql,nopgx,nowatcher

      - name: Download Composer
        run: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
          ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
          
          if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
            echo "ERROR: Invalid composer installer checksum" >&2
            rm composer-setup.php
            exit 1
          fi
          
          php composer-setup.php --quiet
          rm composer-setup.php

      - name: Package FrankenPHP with libraries
        run: |
          # Create directories
          mkdir -p dist/lib
          mkdir -p dist/bin
          
          # Copy PHP shared library
          PHP_LIB_PATH="$(php-config --prefix)/lib/libphp.so"
          if [ -f "$PHP_LIB_PATH" ]; then
            cp "$PHP_LIB_PATH" dist/lib/
            echo "Copied libphp.so from $PHP_LIB_PATH"
          else
            echo "ERROR: Cannot find libphp.so at $PHP_LIB_PATH"
            find /usr/local -name "libphp.so"
            exit 1
          fi
          
          # Copy PHP binaries
          PHP_BIN_PATH="$(php-config --prefix)/bin"
          cp "$PHP_BIN_PATH/php" dist/bin/
          cp "$PHP_BIN_PATH/php-config" dist/bin/
          cp "$PHP_BIN_PATH/phpize" dist/bin/
          cp composer.phar dist/bin/composer
          chmod +x dist/bin/composer
          
          # Copy sqlite3, zip, unzip
          for tool in sqlite3 zip unzip; do
            if command -v $tool &> /dev/null; then
              cp $(which $tool) dist/bin/
              echo "Copied $tool"
            fi
          done
          
          # Copy git and helpers
          if command -v git &> /dev/null; then
            cp $(which git) dist/bin/
            GIT_EXEC_PATH=$(git --exec-path)
            if [ -d "$GIT_EXEC_PATH" ]; then
              mkdir -p dist/libexec/git-core
              cp -r "$GIT_EXEC_PATH"/* dist/libexec/git-core/
              mv dist/bin/git dist/bin/git.real
              cat > dist/bin/git << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export GIT_EXEC_PATH="$SCRIPT_DIR/../libexec/git-core"
          exec "$SCRIPT_DIR/git.real" "$@"
          EOF
              chmod +x dist/bin/git
            fi
          fi
          
          if command -v node &> /dev/null; then
            echo "Copying Node.js $(node --version) from $(which node)"
            cp $(which node) dist/bin/
            NPM_PREFIX=$(npm config get prefix)
            mkdir -p dist/lib/node_modules
            if [ -d "$NPM_PREFIX/lib/node_modules/npm" ]; then
              cp -r "$NPM_PREFIX/lib/node_modules/npm" dist/lib/node_modules/
            fi
            # Create npm wrapper
            cat > dist/bin/npm << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export NODE_PATH="$SCRIPT_DIR/../lib/node_modules"
          exec "$SCRIPT_DIR/node" "$SCRIPT_DIR/../lib/node_modules/npm/bin/npm-cli.js" "$@"
          EOF
            chmod +x dist/bin/npm
            # Create npx wrapper  
            cat > dist/bin/npx << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          export NODE_PATH="$SCRIPT_DIR/../lib/node_modules"
          exec "$SCRIPT_DIR/node" "$SCRIPT_DIR/../lib/node_modules/npm/bin/npx-cli.js" "$@"
          EOF
            chmod +x dist/bin/npx
          fi
          
          # Copy FrankenPHP binary
          cp frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp dist/bin/frankenphp
          chmod +x dist/bin/frankenphp
          
          # Copy all required shared libraries
          echo "Copying shared library dependencies..."
          for binary in frankenphp-${FRANKENPHP_VERSION}/caddy/frankenphp/frankenphp "$PHP_BIN_PATH/php" "$PHP_LIB_PATH"; do
            ldd "$binary" | grep "=> /" | awk '{print $3}' | grep -v "libc.so" | grep -v "ld-linux" | xargs -I '{}' cp -v '{}' dist/lib/ || true
          done
          
          # Copy additional common libraries
          for lib in libzip.so* libpng16.so* libjpeg.so* libfreetype.so* libicu*.so* libonig.so* libxml2.so* libxslt.so* libgd.so* libssl.so* libcrypto.so* libcurl.so* libmariadb.so*; do
            find /usr/lib /usr/lib64 /usr/lib/x86_64-linux-gnu /usr/local/lib -name "$lib" -exec cp -v {} dist/lib/ \; 2>/dev/null || true
          done
          
          # Create self-contained wrapper scripts
          mv dist/bin/php dist/bin/php.real
          cat > dist/bin/php << 'EOF'
          #!/bin/bash
          # Resolve symlinks to get the actual script location
          SOURCE="${BASH_SOURCE[0]}"
          while [ -h "$SOURCE" ]; do
            DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
            SOURCE="$(readlink "$SOURCE")"
            [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
          done
          SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          
          export LD_LIBRARY_PATH="$SCRIPT_DIR/../lib:$LD_LIBRARY_PATH"
          exec "$SCRIPT_DIR/php.real" "$@"
          EOF
          chmod +x dist/bin/php
          
          mv dist/bin/frankenphp dist/bin/frankenphp.real
          cat > dist/bin/frankenphp << 'EOF'
          #!/bin/bash
          # Resolve symlinks to get the actual script location
          SOURCE="${BASH_SOURCE[0]}"
          while [ -h "$SOURCE" ]; do
            DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
            SOURCE="$(readlink "$SOURCE")"
            [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
          done
          SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          
          export LD_LIBRARY_PATH="$SCRIPT_DIR/../lib:$LD_LIBRARY_PATH"
          exec "$SCRIPT_DIR/frankenphp.real" "$@"
          EOF
          chmod +x dist/bin/frankenphp
          
          # Create index.php
          cat > dist/index.php << EOF
          <?php
          echo "FrankenPHP v${FRANKENPHP_VERSION} with PHP " . PHP_VERSION . "\\n";
          echo "Composer: " . trim(shell_exec(\$_SERVER['PWD'] . "/bin/composer --version")) . "\\n\\n";
          echo "PHP Extensions:\\n";
          \$extensions = get_loaded_extensions();
          sort(\$extensions);
          echo implode(", ", \$extensions) . "\\n";
          ?>
          EOF
          
          # Create Caddyfile
          cat > dist/Caddyfile << 'EOF'
          
          localhost:8000 {
              root * .
              encode gzip
              php_server
          }
          EOF
          
          # Create setup script
          cat > dist/install.sh << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
          PROFILE="$HOME/.bash_profile"
          MARKER="# FrankenPHP environment setup"
          LOG_FILE="/tmp/frankenphp-install-$(date +%Y%m%d-%H%M%S).log"
          
          # Setup logging
          exec > >(tee -a "$LOG_FILE")
          exec 2>&1
          
          echo "=== FrankenPHP Installation Log ===" 
          echo "Started: $(date)"
          echo "Log file: $LOG_FILE"
          echo ""
          
          # Function to create post-install script that runs after potential SSH disconnection
          create_post_install_script() {
              cat > /tmp/frankenphp-post-install.sh << 'POSTEOF'
          #!/bin/bash
          echo "=== Post-Installation Script ==="
          echo "Running post-installation tasks..."
          
          # Wait a moment for system to stabilize
          sleep 5
          
          # Function to restart supervisor
          restart_supervisor_post() {
              echo ""
              echo "🔄 Managing Supervisor services..."
          
              if ! command -v supervisorctl &> /dev/null; then
                  echo "ℹ️  Supervisor not found - skipping"
                  return 0
              fi
          
              # Start supervisor service if not running
              if ! systemctl is-active --quiet supervisor 2>/dev/null; then
                  echo "🔄 Starting Supervisor service..."
                  systemctl start supervisor
                  sleep 3
              fi
          
              # Always do a full restart after upgrade to ensure clean state
              echo "🔄 Restarting Supervisor service for clean state..."
              service supervisor restart
              sleep 5
          
              echo "📊 Final Supervisor status:"
              supervisorctl status
          
              # Check for failed services
              local failed_count=$(supervisorctl status | grep -c -v RUNNING | grep -c -v "unix://")
              if [ "$failed_count" -gt 0 ]; then
                  echo "⚠️  Some services may need attention"
              else
                  echo "✅ All services running"
              fi
          }
          
          # Restart supervisor
          restart_supervisor_post
          
          echo ""
          echo "✅ Post-installation completed: $(date)"
          echo "📊 Final versions:"
          echo "   FrankenPHP: $(/usr/local/bin/frankenphp version 2>/dev/null | head -1)"
          echo "   PHP: $(/usr/local/bin/php --version 2>/dev/null | head -1)"
          echo "   Node.js: $(/usr/local/bin/node --version 2>/dev/null)"
          echo ""
          echo "🗑️  Cleaning up post-install script..."
          rm -f /tmp/frankenphp-post-install.sh
          POSTEOF
          
              chmod +x /tmp/frankenphp-post-install.sh
          }
          
          # Function to check running processes
          check_running_processes() {
              local running_processes=$(pgrep -f frankenphp 2>/dev/null || true)
              if [ -n "$running_processes" ]; then
                  echo "⚠️  WARNING: FrankenPHP processes running (PIDs: $running_processes)"
                  echo ""
                  ps aux | grep -v grep | grep frankenphp | head -3
                  echo ""
                  echo "These must be stopped before upgrade."
                  echo ""
          
                  # Use printf to avoid formatting issues
                  printf "Stop FrankenPHP processes now? [y/N] "
                  read -r reply
                  if [[ $reply =~ ^[Yy]$ ]]; then
                      echo ""
                      echo "🛑 Stopping Supervisor services..."
                      supervisorctl stop all 2>/dev/null || true
                      sleep 3
          
                      echo "🛑 Force killing FrankenPHP processes..."
                      pkill -9 -f frankenphp 2>/dev/null || true
                      sleep 2
          
                      # Verify processes are gone
                      remaining=$(pgrep -f frankenphp 2>/dev/null || true)
                      if [ -n "$remaining" ]; then
                          echo "❌ Some processes still running: $remaining"
                          echo "Please kill manually and retry"
                          exit 1
                      else
                          echo "✅ All FrankenPHP processes stopped"
                      fi
                  else
                      echo ""
                      echo "❌ Installation cancelled"
                      echo "Please stop processes manually:"
                      echo "   sudo supervisorctl stop all"
                      echo "   sudo pkill -f frankenphp"
                      exit 1
                  fi
              fi
          }
          
          # Function to detect upgrade
          detect_upgrade() {
              if [ "$EUID" -eq 0 ]; then
                  [ -f "/usr/local/bin/frankenphp" ] && return 0
              else
                  grep -q "$MARKER" "$PROFILE" 2>/dev/null && return 0
              fi
              return 1
          }
          
          # Function to backup
          backup_installation() {
              local backup_dir="/tmp/frankenphp-backup-$(date +%Y%m%d-%H%M%S)"
              echo "📦 Creating backup: $backup_dir"
          
              if [ "$EUID" -eq 0 ]; then
                  mkdir -p "$backup_dir"/{bin,lib}
                  for binary in frankenphp php composer node npm npx git sqlite3 zip unzip php-config phpize; do
                      [ -f "/usr/local/bin/$binary" ] && cp "/usr/local/bin/$binary" "$backup_dir/bin/" 2>/dev/null
                      [ -f "/usr/local/bin/$binary.real" ] && cp "/usr/local/bin/$binary.real" "$backup_dir/bin/" 2>/dev/null
                  done
                  [ -f "/usr/local/lib/libphp.so" ] && cp /usr/local/lib/libphp.so* "$backup_dir/lib/" 2>/dev/null
                  echo "✅ Backup created: $backup_dir"
              else
                  [ -f "$PROFILE" ] && cp "$PROFILE" "${PROFILE}.backup-$(date +%Y%m%d-%H%M%S)"
              fi
              echo "$backup_dir" > /tmp/frankenphp-last-backup
          }
          
          # Show versions
          show_versions() {
              echo "=== VERSION COMPARISON ==="
              if [ "$EUID" -eq 0 ]; then
                  echo "Current FrankenPHP: $(/usr/local/bin/frankenphp version 2>/dev/null | head -1 || echo 'not installed')"
                  echo "Current PHP: $(/usr/local/bin/php --version 2>/dev/null | head -1 || echo 'not installed')"  
                  echo "Current Node.js: $(/usr/local/bin/node --version 2>/dev/null || echo 'not installed')"
              else
                  echo "Current FrankenPHP: $(command -v frankenphp >/dev/null && frankenphp version 2>/dev/null | head -1 || echo 'not installed')"
                  echo "Current PHP: $(command -v php >/dev/null && php --version 2>/dev/null | head -1 || echo 'not installed')"
                  echo "Current Node.js: $(command -v node >/dev/null && node --version || echo 'not installed')"
              fi
              echo ""
              echo "New FrankenPHP: $(cd "$SCRIPT_DIR" && ./bin/frankenphp.real version 2>/dev/null | head -1)"
              echo "New PHP: $(cd "$SCRIPT_DIR" && ./bin/php.real --version 2>/dev/null | head -1)"
              echo "New Node.js: $(cd "$SCRIPT_DIR" && ./bin/node --version 2>/dev/null)"
              echo ""
          }
          
          # Check if we're root
          if [ "$EUID" -ne 0 ]; then
              echo "❌ This script must be run as root (use sudo)"
              echo "   sudo ./install.sh"
              exit 1
          fi
          
          # Main logic
          if detect_upgrade; then
              echo "🔄 === UPGRADE MODE ==="
              show_versions
          
              echo "⚠️  IMPORTANT:"
              echo "   • This will temporarily stop all FrankenPHP services"
              echo "   • SSH connection may be briefly interrupted"
              echo "   • Services will automatically restart after completion"
              echo ""
          
              check_running_processes
          
              printf "Continue with upgrade? [y/N] "
              read -r reply
              if [[ ! $reply =~ ^[Yy]$ ]]; then
                  echo "❌ Upgrade cancelled"
                  exit 1
              fi
          
              echo ""
              backup_installation
          
              echo "🧹 Cleaning old installation..."
              # Move instead of remove to be safer
              for binary in frankenphp php composer node npm npx git sqlite3 zip unzip php-config phpize; do
                  [ -f "/usr/local/bin/$binary" ] && mv "/usr/local/bin/$binary" "/usr/local/bin/$binary.old" 2>/dev/null
                  [ -f "/usr/local/bin/$binary.real" ] && mv "/usr/local/bin/$binary.real" "/usr/local/bin/$binary.real.old" 2>/dev/null  
              done
              echo "✅ Old installation backed up"
          else
              echo "🆕 === NEW INSTALLATION ==="
              show_versions
              printf "Continue with installation? [y/N] "
              read -r reply
              if [[ ! $reply =~ ^[Yy]$ ]]; then
                  echo "❌ Installation cancelled"
                  exit 1
              fi
          fi
          
          # Create post-install script before we potentially lose SSH connection
          echo ""
          echo "📋 Creating post-installation script..."
          create_post_install_script
          
          echo "📦 Installing FrankenPHP system-wide..."
          
          # Create directories
          mkdir -p /usr/local/lib /usr/local/libexec
          
          # Install libraries
          echo "📚 Installing libraries..."
          cp -r "$SCRIPT_DIR/lib"/* /usr/local/lib/
          [ -d "$SCRIPT_DIR/libexec" ] && cp -r "$SCRIPT_DIR/libexec"/* /usr/local/libexec/
          
          # Update library cache
          echo "/usr/local/lib" > /etc/ld.so.conf.d/frankenphp.conf
          ldconfig 2>/dev/null || true
          
          echo "🔧 Installing binaries..."
          
          # Install binaries with wrapper scripts  
          for binary in frankenphp php; do
            if [ -f "$SCRIPT_DIR/bin/$binary.real" ]; then
              cp "$SCRIPT_DIR/bin/$binary.real" "/usr/local/bin/$binary.real"
              chmod +x "/usr/local/bin/$binary.real"
              cat > "/usr/local/bin/$binary" << EOL
          #!/bin/bash
          export LD_LIBRARY_PATH="/usr/local/lib:\$LD_LIBRARY_PATH"
          exec "/usr/local/bin/$binary.real" "\$@"
          EOL
              chmod +x "/usr/local/bin/$binary"
            fi
          done
          
          # Install other tools
          for binary in composer node npm npx sqlite3 zip unzip php-config phpize; do
            if [ -f "$SCRIPT_DIR/bin/$binary" ]; then
              cp "$SCRIPT_DIR/bin/$binary" "/usr/local/bin/$binary"
              chmod +x "/usr/local/bin/$binary"
            fi
          done
          
          # Install git wrapper if present
          if [ -f "$SCRIPT_DIR/bin/git.real" ]; then
            cp "$SCRIPT_DIR/bin/git.real" "/usr/local/bin/git.real"
            chmod +x "/usr/local/bin/git.real"
            cat > "/usr/local/bin/git" << 'EOL'
          #!/bin/bash
          export GIT_EXEC_PATH="/usr/local/libexec/git-core"
          exec "/usr/local/bin/git.real" "$@"
          EOL
            chmod +x "/usr/local/bin/git"
          fi
          
          # Clean up old backup files
          rm -f /usr/local/bin/*.old /usr/local/bin/*.real.old 2>/dev/null
          
          echo ""
          echo "✅ === INSTALLATION COMPLETED ==="
          echo "📍 Binaries: /usr/local/bin"
          echo "📍 Libraries: /usr/local/lib"
          echo "📋 Log: $LOG_FILE"
          
          # Schedule post-install script to run even if SSH disconnects
          echo ""
          echo "🚀 Scheduling post-installation tasks..."
          echo "   (This will run automatically even if SSH disconnects)"
          
          # Run post-install script in background with nohup
          nohup bash /tmp/frankenphp-post-install.sh > /tmp/frankenphp-post-install.log 2>&1 &
          
          echo ""
          echo "📊 Quick version check:"
          timeout 5 /usr/local/bin/frankenphp version 2>/dev/null | head -1 || echo "FrankenPHP: installed (may need restart to verify)"
          timeout 5 /usr/local/bin/php --version 2>/dev/null | head -1 || echo "PHP: installed (may need restart to verify)"
          timeout 5 /usr/local/bin/node --version 2>/dev/null | sed 's/^/Node.js: /' || echo "Node.js: installed (may need restart to verify)"
          
          echo ""
          echo "🔄 Services will restart automatically in the background"
          echo "📋 Check post-install log: tail -f /tmp/frankenphp-post-install.log"
          echo "📋 Check main install log: tail -f $LOG_FILE"
          echo ""
          echo "✅ Installation completed successfully!"
          
          EOF
          chmod +x dist/install.sh
          
          # Create README
          cat > dist/README.md << 'EOF'
          # FrankenPHP Distribution
          
          ## Installation
          
          ### System-wide (recommended for servers)
          ```bash
          sudo ./install.sh
          ```
          
          ### User-only
          ```bash
          ./install.sh
          source ~/.bash_profile
          ```
          
          ## Quick Start Demo
          
          After installation, test FrankenPHP immediately:
          ```bash
          cd /path/to/frankenphp-directory
          frankenphp run
          # Visit http://localhost:8000 to see phpinfo
          ```
          
          The included `Caddyfile` serves the demo `index.php` file.
          
          ## Included Tools
          - FrankenPHP, PHP 8.x, Composer
          - Node.js 22.x LTS, npm, npx
          - Git, sqlite3, zip/unzip
          
          ## PHP Extensions
          Core, DOM, MB, XML, PDO, MySQL, SQLite, GD, Zlib, Curl, OpenSSL, BCMath, Intl, PCNTL, and more.
          
          ## Laravel Octane Support
          Includes ext-pcntl required for Laravel Octane process management.
          EOF
          
          # Create archive
          cd dist
          tar -czf ../frankenphp-linux-amd64-${{ env.PHP_SHORT }}.tar.gz .
          cd ..

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: frankenphp-${{ env.PHP_SHORT }}
          path: frankenphp-linux-amd64-${{ env.PHP_SHORT }}.tar.gz
          retention-days: 7

  create-release:
    needs: [check-new-release, build-php]
    if: ${{ always() && needs.build-php.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      FRANKENPHP_VERSION: ${{ needs.check-new-release.outputs.latest_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      - name: Prepare release files
        run: |
          mkdir -p release-files
          find release-artifacts -name "*.tar.gz" -exec mv {} release-files/ \;
          echo "Files to be released:"
          ls -la release-files/

      - name: Check for existing release tag
        id: check-tag
        run: |
          STABLE_TAG="v${{ env.FRANKENPHP_VERSION }}"
          echo "stable_tag=$STABLE_TAG" >> $GITHUB_OUTPUT
          
          if git ls-remote --tags origin refs/tags/$STABLE_TAG | grep -q $STABLE_TAG; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete existing release
        if: steps.check-tag.outputs.tag_exists == 'true'
        run: |
          STABLE_TAG="${{ steps.check-tag.outputs.stable_tag }}"
          
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.ORG_RELEASE_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$STABLE_TAG" | \
            jq -r '.id')
          
          if [ "$RELEASE_ID" != "null" ]; then
            curl -s -X DELETE -H "Authorization: token ${{ secrets.ORG_RELEASE_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          fi
          
          git tag -d $STABLE_TAG || true
          git push --delete origin $STABLE_TAG || true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*
          tag_name: ${{ steps.check-tag.outputs.stable_tag }}
          name: FrankenPHP v${{ env.FRANKENPHP_VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            FrankenPHP v${{ env.FRANKENPHP_VERSION }} with PHP 8.3 and 8.4
            
            ## Quick Install
            ```bash
            tar -xzf frankenphp-linux-amd64-php84.tar.gz
            sudo ./install.sh     # System-wide (recommended)
            ```
            
            ## Quick Start Demo
            ```bash
            frankenphp run   # Starts server on http://localhost:8080
            ```
            
            ## Downloads
            - **PHP 8.3**: `frankenphp-linux-amd64-php83.tar.gz`
            - **PHP 8.4**: `frankenphp-linux-amd64-php84.tar.gz`
            
            ## What's Included
            - FrankenPHP, PHP 8.x with all common extensions, Composer
            - Node.js 22.x LTS, npm, npx
            - Git, sqlite3, zip/unzip
            - Self-contained binaries (work with Supervisor!)
            - ext-pcntl for Laravel Octane support
            
            ## Two Install Methods
            1. **System-wide** (`sudo`): Creates `/usr/local/bin` symlinks, works everywhere
            2. **User-only**: Modifies `~/.bash_profile`, requires sourcing
            
            System-wide recommended for production servers.
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_RELEASE_TOKEN }}
